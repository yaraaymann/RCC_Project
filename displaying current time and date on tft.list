
displaying current time and date on tft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bcc  08004bcc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004bcc  08004bcc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bcc  08004bcc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bcc  08004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bd0  08004bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000064  08004c38  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004c38  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ef2  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9b  00000000  00000000  00027fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  00029e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b2  00000000  00000000  0002a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001794b  00000000  00000000  0002ae32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b14e  00000000  00000000  0004277d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084039  00000000  00000000  0004d8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002858  00000000  00000000  000d1904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000d415c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d44 	.word	0x08003d44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003d44 	.word	0x08003d44

0800014c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000158:	f001 fb5a 	bl	8001810 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40010c00 	.word	0x40010c00

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 8000170:	f001 fb4e 	bl	8001810 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2101      	movs	r1, #1
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 fb43 	bl	8001810 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f001 f8b4 	bl	80012f8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2101      	movs	r1, #1
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 fb3b 	bl	8001810 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2102      	movs	r1, #2
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 fb2c 	bl	8001810 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f002 ff13 	bl	8002fec <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	20000094 	.word	0x20000094

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2102      	movs	r1, #2
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 fb12 	bl	8001810 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f002 fef8 	bl	8002fec <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	20000094 	.word	0x20000094

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f837 	bl	80012f8 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029e:	b590      	push	{r4, r7, lr}
 80002a0:	b085      	sub	sp, #20
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4604      	mov	r4, r0
 80002a6:	4608      	mov	r0, r1
 80002a8:	4611      	mov	r1, r2
 80002aa:	461a      	mov	r2, r3
 80002ac:	4623      	mov	r3, r4
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4603      	mov	r3, r0
 80002b2:	71bb      	strb	r3, [r7, #6]
 80002b4:	460b      	mov	r3, r1
 80002b6:	717b      	strb	r3, [r7, #5]
 80002b8:	4613      	mov	r3, r2
 80002ba:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002bc:	202a      	movs	r0, #42	; 0x2a
 80002be:	f7ff ff71 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	737b      	strb	r3, [r7, #13]
 80002ca:	2300      	movs	r3, #0
 80002cc:	73bb      	strb	r3, [r7, #14]
 80002ce:	797b      	ldrb	r3, [r7, #5]
 80002d0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	2104      	movs	r1, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff7d 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002de:	202b      	movs	r0, #43	; 0x2b
 80002e0:	f7ff ff60 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002e8:	793b      	ldrb	r3, [r7, #4]
 80002ea:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	2104      	movs	r1, #4
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff70 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80002f8:	202c      	movs	r0, #44	; 0x2c
 80002fa:	f7ff ff53 	bl	80001a4 <ST7735_WriteCommand>
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
	...

08000308 <ST7735_Init>:

void ST7735_Init() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800030c:	f7ff ff1e 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 8000310:	f7ff ff34 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <ST7735_Init+0x28>)
 8000316:	f7ff ff79 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800031a:	4806      	ldr	r0, [pc, #24]	; (8000334 <ST7735_Init+0x2c>)
 800031c:	f7ff ff76 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000320:	4805      	ldr	r0, [pc, #20]	; (8000338 <ST7735_Init+0x30>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000326:	f7ff ff1d 	bl	8000164 <ST7735_Unselect>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	08003d84 	.word	0x08003d84
 8000334:	08003dc0 	.word	0x08003dc0
 8000338:	08003dd0 	.word	0x08003dd0

0800033c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
 8000346:	460b      	mov	r3, r1
 8000348:	80bb      	strh	r3, [r7, #4]
 800034a:	4613      	mov	r3, r2
 800034c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	2b7f      	cmp	r3, #127	; 0x7f
 8000352:	d823      	bhi.n	800039c <ST7735_DrawPixel+0x60>
 8000354:	88bb      	ldrh	r3, [r7, #4]
 8000356:	2b9f      	cmp	r3, #159	; 0x9f
 8000358:	d820      	bhi.n	800039c <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 800035a:	f7ff fef7 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	b2d8      	uxtb	r0, r3
 8000362:	88bb      	ldrh	r3, [r7, #4]
 8000364:	b2d9      	uxtb	r1, r3
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	3301      	adds	r3, #1
 800036c:	b2da      	uxtb	r2, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3301      	adds	r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	f7ff ff92 	bl	800029e <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800037a:	887b      	ldrh	r3, [r7, #2]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	b29b      	uxth	r3, r3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	733b      	strb	r3, [r7, #12]
 8000384:	887b      	ldrh	r3, [r7, #2]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2102      	movs	r1, #2
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff21 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 8000396:	f7ff fee5 	bl	8000164 <ST7735_Unselect>
 800039a:	e000      	b.n	800039e <ST7735_DrawPixel+0x62>
        return;
 800039c:	bf00      	nop
}
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003a4:	b082      	sub	sp, #8
 80003a6:	b590      	push	{r4, r7, lr}
 80003a8:	b089      	sub	sp, #36	; 0x24
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
 80003ae:	4603      	mov	r3, r0
 80003b0:	80fb      	strh	r3, [r7, #6]
 80003b2:	460b      	mov	r3, r1
 80003b4:	80bb      	strh	r3, [r7, #4]
 80003b6:	4613      	mov	r3, r2
 80003b8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	b2d8      	uxtb	r0, r3
 80003be:	88bb      	ldrh	r3, [r7, #4]
 80003c0:	b2d9      	uxtb	r1, r3
 80003c2:	88fb      	ldrh	r3, [r7, #6]
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003ca:	4413      	add	r3, r2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	3b01      	subs	r3, #1
 80003d0:	b2dc      	uxtb	r4, r3
 80003d2:	88bb      	ldrh	r3, [r7, #4]
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003da:	4413      	add	r3, r2
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	3b01      	subs	r3, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	4622      	mov	r2, r4
 80003e4:	f7ff ff5b 	bl	800029e <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
 80003ec:	e043      	b.n	8000476 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80003ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	3b20      	subs	r3, #32
 80003f4:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80003f8:	fb01 f303 	mul.w	r3, r1, r3
 80003fc:	4619      	mov	r1, r3
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	440b      	add	r3, r1
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
 800040e:	e029      	b.n	8000464 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000410:	697a      	ldr	r2, [r7, #20]
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00e      	beq.n	800043e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000420:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000422:	0a1b      	lsrs	r3, r3, #8
 8000424:	b29b      	uxth	r3, r3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	743b      	strb	r3, [r7, #16]
 800042a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800042c:	b2db      	uxtb	r3, r3
 800042e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	2102      	movs	r1, #2
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff fece 	bl	80001d8 <ST7735_WriteData>
 800043c:	e00f      	b.n	800045e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800043e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b29b      	uxth	r3, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	733b      	strb	r3, [r7, #12]
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800044e:	b2db      	uxtb	r3, r3
 8000450:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	2102      	movs	r1, #2
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff febd 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	3301      	adds	r3, #1
 8000462:	61bb      	str	r3, [r7, #24]
 8000464:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000468:	461a      	mov	r2, r3
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	4293      	cmp	r3, r2
 800046e:	d3cf      	bcc.n	8000410 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000470:	69fb      	ldr	r3, [r7, #28]
 8000472:	3301      	adds	r3, #1
 8000474:	61fb      	str	r3, [r7, #28]
 8000476:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800047a:	461a      	mov	r2, r3
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	4293      	cmp	r3, r2
 8000480:	d3b5      	bcc.n	80003ee <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	3724      	adds	r7, #36	; 0x24
 8000488:	46bd      	mov	sp, r7
 800048a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800048e:	b002      	add	sp, #8
 8000490:	4770      	bx	lr

08000492 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000492:	b082      	sub	sp, #8
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af04      	add	r7, sp, #16
 800049a:	603a      	str	r2, [r7, #0]
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	4603      	mov	r3, r0
 80004a0:	80fb      	strh	r3, [r7, #6]
 80004a2:	460b      	mov	r3, r1
 80004a4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80004a6:	f7ff fe51 	bl	800014c <ST7735_Select>

    while(*str) {
 80004aa:	e02d      	b.n	8000508 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80004ac:	88fb      	ldrh	r3, [r7, #6]
 80004ae:	7d3a      	ldrb	r2, [r7, #20]
 80004b0:	4413      	add	r3, r2
 80004b2:	2b7f      	cmp	r3, #127	; 0x7f
 80004b4:	dd13      	ble.n	80004de <ST7735_WriteString+0x4c>
            x = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80004ba:	7d7b      	ldrb	r3, [r7, #21]
 80004bc:	b29a      	uxth	r2, r3
 80004be:	88bb      	ldrh	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80004c4:	88bb      	ldrh	r3, [r7, #4]
 80004c6:	7d7a      	ldrb	r2, [r7, #21]
 80004c8:	4413      	add	r3, r2
 80004ca:	2b9f      	cmp	r3, #159	; 0x9f
 80004cc:	dc21      	bgt.n	8000512 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b20      	cmp	r3, #32
 80004d4:	d103      	bne.n	80004de <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	603b      	str	r3, [r7, #0]
                continue;
 80004dc:	e014      	b.n	8000508 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781a      	ldrb	r2, [r3, #0]
 80004e2:	88b9      	ldrh	r1, [r7, #4]
 80004e4:	88f8      	ldrh	r0, [r7, #6]
 80004e6:	8c3b      	ldrh	r3, [r7, #32]
 80004e8:	9302      	str	r3, [sp, #8]
 80004ea:	8bbb      	ldrh	r3, [r7, #28]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f7ff ff56 	bl	80003a4 <ST7735_WriteChar>
        x += font.width;
 80004f8:	7d3b      	ldrb	r3, [r7, #20]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	4413      	add	r3, r2
 8000500:	80fb      	strh	r3, [r7, #6]
        str++;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1cd      	bne.n	80004ac <ST7735_WriteString+0x1a>
 8000510:	e000      	b.n	8000514 <ST7735_WriteString+0x82>
                break;
 8000512:	bf00      	nop
    }

    ST7735_Unselect();
 8000514:	f7ff fe26 	bl	8000164 <ST7735_Unselect>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000522:	b002      	add	sp, #8
 8000524:	4770      	bx	lr

08000526 <ST7735_drawLine>:
    }

    ST7735_Unselect();
}

void ST7735_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8000526:	b590      	push	{r4, r7, lr}
 8000528:	b087      	sub	sp, #28
 800052a:	af00      	add	r7, sp, #0
 800052c:	4604      	mov	r4, r0
 800052e:	4608      	mov	r0, r1
 8000530:	4611      	mov	r1, r2
 8000532:	461a      	mov	r2, r3
 8000534:	4623      	mov	r3, r4
 8000536:	80fb      	strh	r3, [r7, #6]
 8000538:	4603      	mov	r3, r0
 800053a:	80bb      	strh	r3, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	807b      	strh	r3, [r7, #2]
 8000540:	4613      	mov	r3, r2
 8000542:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000544:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000548:	461a      	mov	r2, r3
 800054a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000554:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800055c:	4619      	mov	r1, r3
 800055e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000562:	1acb      	subs	r3, r1, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	429a      	cmp	r2, r3
 800056c:	bfcc      	ite	gt
 800056e:	2301      	movgt	r3, #1
 8000570:	2300      	movle	r3, #0
 8000572:	b2db      	uxtb	r3, r3
 8000574:	82bb      	strh	r3, [r7, #20]
    if (steep) {
 8000576:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00b      	beq.n	8000596 <ST7735_drawLine+0x70>
        _swap_int16_t(&x0, &y0);
 800057e:	1d3a      	adds	r2, r7, #4
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f87e 	bl	8000686 <_swap_int16_t>
        _swap_int16_t(&x1, &y1);
 800058a:	463a      	mov	r2, r7
 800058c:	1cbb      	adds	r3, r7, #2
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f878 	bl	8000686 <_swap_int16_t>
    }

    if (x0 > x1) {
 8000596:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800059a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dd0b      	ble.n	80005ba <ST7735_drawLine+0x94>
        _swap_int16_t(&x0, &x1);
 80005a2:	1cba      	adds	r2, r7, #2
 80005a4:	1dbb      	adds	r3, r7, #6
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f86c 	bl	8000686 <_swap_int16_t>
        _swap_int16_t(&y0, &y1);
 80005ae:	463a      	mov	r2, r7
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f866 	bl	8000686 <_swap_int16_t>
    }

    int16_t dx = x1 - x0;
 80005ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	827b      	strh	r3, [r7, #18]
    int16_t dy = abs(y1 - y0);
 80005cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bfb8      	it	lt
 80005dc:	425b      	neglt	r3, r3
 80005de:	823b      	strh	r3, [r7, #16]
    int16_t err = dx / 2;
 80005e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005e4:	0fda      	lsrs	r2, r3, #31
 80005e6:	4413      	add	r3, r2
 80005e8:	105b      	asrs	r3, r3, #1
 80005ea:	82fb      	strh	r3, [r7, #22]
    int16_t ystep = (y0 < y1) ? 1 : -1;
 80005ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	da01      	bge.n	80005fc <ST7735_drawLine+0xd6>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e001      	b.n	8000600 <ST7735_drawLine+0xda>
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	81fb      	strh	r3, [r7, #14]

    for (; x0 <= x1; x0++) {
 8000602:	e035      	b.n	8000670 <ST7735_drawLine+0x14a>
        if (steep) {
 8000604:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00a      	beq.n	8000622 <ST7735_drawLine+0xfc>
            ST7735_DrawPixel(y0, x0, color);
 800060c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000610:	b29b      	uxth	r3, r3
 8000612:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000616:	b291      	uxth	r1, r2
 8000618:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe8e 	bl	800033c <ST7735_DrawPixel>
 8000620:	e009      	b.n	8000636 <ST7735_drawLine+0x110>
        } else {
            ST7735_DrawPixel(x0, y0, color);
 8000622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800062c:	b291      	uxth	r1, r2
 800062e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fe83 	bl	800033c <ST7735_DrawPixel>
        }
        err -= dy;
 8000636:	8afa      	ldrh	r2, [r7, #22]
 8000638:	8a3b      	ldrh	r3, [r7, #16]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b29b      	uxth	r3, r3
 800063e:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000640:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000644:	2b00      	cmp	r3, #0
 8000646:	da0c      	bge.n	8000662 <ST7735_drawLine+0x13c>
            y0 += ystep;
 8000648:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800064c:	b29a      	uxth	r2, r3
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	4413      	add	r3, r2
 8000652:	b29b      	uxth	r3, r3
 8000654:	b21b      	sxth	r3, r3
 8000656:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000658:	8afa      	ldrh	r2, [r7, #22]
 800065a:	8a7b      	ldrh	r3, [r7, #18]
 800065c:	4413      	add	r3, r2
 800065e:	b29b      	uxth	r3, r3
 8000660:	82fb      	strh	r3, [r7, #22]
    for (; x0 <= x1; x0++) {
 8000662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000666:	b29b      	uxth	r3, r3
 8000668:	3301      	adds	r3, #1
 800066a:	b29b      	uxth	r3, r3
 800066c:	b21b      	sxth	r3, r3
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000674:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000678:	429a      	cmp	r2, r3
 800067a:	ddc3      	ble.n	8000604 <ST7735_drawLine+0xde>
        }
    }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	371c      	adds	r7, #28
 8000682:	46bd      	mov	sp, r7
 8000684:	bd90      	pop	{r4, r7, pc}

08000686 <_swap_int16_t>:

// Helper function to swap integers
void _swap_int16_t(int16_t* a, int16_t* b) {
 8000686:	b480      	push	{r7}
 8000688:	b085      	sub	sp, #20
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
    int16_t t = *a;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	81fb      	strh	r3, [r7, #14]
    *a = *b;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f9b3 2000 	ldrsh.w	r2, [r3]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	801a      	strh	r2, [r3, #0]
    *b = t;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	89fa      	ldrh	r2, [r7, #14]
 80006a4:	801a      	strh	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <ST7735_drawCircle>:

void ST7735_drawCircle(int16_t x, int16_t y, int16_t radius, uint16_t color) {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4604      	mov	r4, r0
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4623      	mov	r3, r4
 80006c0:	80fb      	strh	r3, [r7, #6]
 80006c2:	4603      	mov	r3, r0
 80006c4:	80bb      	strh	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	807b      	strh	r3, [r7, #2]
 80006ca:	4613      	mov	r3, r2
 80006cc:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - radius;
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	f1c3 0301 	rsb	r3, r3, #1
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * radius;
 80006dc:	887b      	ldrh	r3, [r7, #2]
 80006de:	461a      	mov	r2, r3
 80006e0:	03d2      	lsls	r2, r2, #15
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	827b      	strh	r3, [r7, #18]
    int16_t xi = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	823b      	strh	r3, [r7, #16]
    int16_t yi = radius;
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	81fb      	strh	r3, [r7, #14]

    // Draw the initial points
    ST7735_DrawPixel(x, y + radius, color);
 80006f2:	88f8      	ldrh	r0, [r7, #6]
 80006f4:	88ba      	ldrh	r2, [r7, #4]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	4413      	add	r3, r2
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	883a      	ldrh	r2, [r7, #0]
 80006fe:	4619      	mov	r1, r3
 8000700:	f7ff fe1c 	bl	800033c <ST7735_DrawPixel>
    ST7735_DrawPixel(x, y - radius, color);
 8000704:	88f8      	ldrh	r0, [r7, #6]
 8000706:	88ba      	ldrh	r2, [r7, #4]
 8000708:	887b      	ldrh	r3, [r7, #2]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b29b      	uxth	r3, r3
 800070e:	883a      	ldrh	r2, [r7, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f7ff fe13 	bl	800033c <ST7735_DrawPixel>
    ST7735_DrawPixel(x + radius, y, color);
 8000716:	88fa      	ldrh	r2, [r7, #6]
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	4413      	add	r3, r2
 800071c:	b29b      	uxth	r3, r3
 800071e:	88b9      	ldrh	r1, [r7, #4]
 8000720:	883a      	ldrh	r2, [r7, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fe0a 	bl	800033c <ST7735_DrawPixel>
    ST7735_DrawPixel(x - radius, y, color);
 8000728:	88fa      	ldrh	r2, [r7, #6]
 800072a:	887b      	ldrh	r3, [r7, #2]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	88b9      	ldrh	r1, [r7, #4]
 8000732:	883a      	ldrh	r2, [r7, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe01 	bl	800033c <ST7735_DrawPixel>

    // Draw the circle
    while (xi < yi) {
 800073a:	e081      	b.n	8000840 <ST7735_drawCircle+0x190>
        if (f >= 0) {
 800073c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db0e      	blt.n	8000762 <ST7735_drawCircle+0xb2>
            yi--;
 8000744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000748:	b29b      	uxth	r3, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	b29b      	uxth	r3, r3
 800074e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000750:	8a7b      	ldrh	r3, [r7, #18]
 8000752:	3302      	adds	r3, #2
 8000754:	b29b      	uxth	r3, r3
 8000756:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000758:	8afa      	ldrh	r2, [r7, #22]
 800075a:	8a7b      	ldrh	r3, [r7, #18]
 800075c:	4413      	add	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	82fb      	strh	r3, [r7, #22]
        }
        xi++;
 8000762:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000766:	b29b      	uxth	r3, r3
 8000768:	3301      	adds	r3, #1
 800076a:	b29b      	uxth	r3, r3
 800076c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800076e:	8abb      	ldrh	r3, [r7, #20]
 8000770:	3302      	adds	r3, #2
 8000772:	b29b      	uxth	r3, r3
 8000774:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000776:	8afa      	ldrh	r2, [r7, #22]
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	b29b      	uxth	r3, r3
 800077e:	82fb      	strh	r3, [r7, #22]

        ST7735_DrawPixel(x + xi, y + yi, color);
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	8a3b      	ldrh	r3, [r7, #16]
 8000784:	4413      	add	r3, r2
 8000786:	b298      	uxth	r0, r3
 8000788:	88ba      	ldrh	r2, [r7, #4]
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	4413      	add	r3, r2
 800078e:	b29b      	uxth	r3, r3
 8000790:	883a      	ldrh	r2, [r7, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	f7ff fdd2 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x - xi, y + yi, color);
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	8a3b      	ldrh	r3, [r7, #16]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b298      	uxth	r0, r3
 80007a0:	88ba      	ldrh	r2, [r7, #4]
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	4413      	add	r3, r2
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	883a      	ldrh	r2, [r7, #0]
 80007aa:	4619      	mov	r1, r3
 80007ac:	f7ff fdc6 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x + xi, y - yi, color);
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	8a3b      	ldrh	r3, [r7, #16]
 80007b4:	4413      	add	r3, r2
 80007b6:	b298      	uxth	r0, r3
 80007b8:	88ba      	ldrh	r2, [r7, #4]
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	883a      	ldrh	r2, [r7, #0]
 80007c2:	4619      	mov	r1, r3
 80007c4:	f7ff fdba 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x - xi, y - yi, color);
 80007c8:	88fa      	ldrh	r2, [r7, #6]
 80007ca:	8a3b      	ldrh	r3, [r7, #16]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	b298      	uxth	r0, r3
 80007d0:	88ba      	ldrh	r2, [r7, #4]
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	883a      	ldrh	r2, [r7, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	f7ff fdae 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x + yi, y + xi, color);
 80007e0:	88fa      	ldrh	r2, [r7, #6]
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	4413      	add	r3, r2
 80007e6:	b298      	uxth	r0, r3
 80007e8:	88ba      	ldrh	r2, [r7, #4]
 80007ea:	8a3b      	ldrh	r3, [r7, #16]
 80007ec:	4413      	add	r3, r2
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	883a      	ldrh	r2, [r7, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	f7ff fda2 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x - yi, y + xi, color);
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	89fb      	ldrh	r3, [r7, #14]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b298      	uxth	r0, r3
 8000800:	88ba      	ldrh	r2, [r7, #4]
 8000802:	8a3b      	ldrh	r3, [r7, #16]
 8000804:	4413      	add	r3, r2
 8000806:	b29b      	uxth	r3, r3
 8000808:	883a      	ldrh	r2, [r7, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	f7ff fd96 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x + yi, y - xi, color);
 8000810:	88fa      	ldrh	r2, [r7, #6]
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	4413      	add	r3, r2
 8000816:	b298      	uxth	r0, r3
 8000818:	88ba      	ldrh	r2, [r7, #4]
 800081a:	8a3b      	ldrh	r3, [r7, #16]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	883a      	ldrh	r2, [r7, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	f7ff fd8a 	bl	800033c <ST7735_DrawPixel>
        ST7735_DrawPixel(x - yi, y - xi, color);
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b298      	uxth	r0, r3
 8000830:	88ba      	ldrh	r2, [r7, #4]
 8000832:	8a3b      	ldrh	r3, [r7, #16]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b29b      	uxth	r3, r3
 8000838:	883a      	ldrh	r2, [r7, #0]
 800083a:	4619      	mov	r1, r3
 800083c:	f7ff fd7e 	bl	800033c <ST7735_DrawPixel>
    while (xi < yi) {
 8000840:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000848:	429a      	cmp	r2, r3
 800084a:	f6ff af77 	blt.w	800073c <ST7735_drawCircle+0x8c>
    }
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	371c      	adds	r7, #28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd90      	pop	{r4, r7, pc}

08000858 <ST7735_FillRectangleFast>:

void ST7735_FillRectangleFast(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4604      	mov	r4, r0
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4623      	mov	r3, r4
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	4603      	mov	r3, r0
 800086c:	80bb      	strh	r3, [r7, #4]
 800086e:	460b      	mov	r3, r1
 8000870:	807b      	strh	r3, [r7, #2]
 8000872:	4613      	mov	r3, r2
 8000874:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	2b7f      	cmp	r3, #127	; 0x7f
 800087a:	d869      	bhi.n	8000950 <ST7735_FillRectangleFast+0xf8>
 800087c:	88bb      	ldrh	r3, [r7, #4]
 800087e:	2b9f      	cmp	r3, #159	; 0x9f
 8000880:	d866      	bhi.n	8000950 <ST7735_FillRectangleFast+0xf8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000882:	88fa      	ldrh	r2, [r7, #6]
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	4413      	add	r3, r2
 8000888:	2b80      	cmp	r3, #128	; 0x80
 800088a:	dd03      	ble.n	8000894 <ST7735_FillRectangleFast+0x3c>
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000892:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000894:	88ba      	ldrh	r2, [r7, #4]
 8000896:	883b      	ldrh	r3, [r7, #0]
 8000898:	4413      	add	r3, r2
 800089a:	2ba0      	cmp	r3, #160	; 0xa0
 800089c:	dd03      	ble.n	80008a6 <ST7735_FillRectangleFast+0x4e>
 800089e:	88bb      	ldrh	r3, [r7, #4]
 80008a0:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80008a4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80008a6:	f7ff fc51 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	b2d8      	uxtb	r0, r3
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	b2d9      	uxtb	r1, r3
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4413      	add	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	3b01      	subs	r3, #1
 80008c0:	b2dc      	uxtb	r4, r3
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	883b      	ldrh	r3, [r7, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4622      	mov	r2, r4
 80008d4:	f7ff fce3 	bl	800029e <ST7735_SetAddressWindow>

    // Prepare whole line in a single buffer
    uint8_t pixel[] = { color >> 8, color & 0xFF };
 80008d8:	8c3b      	ldrh	r3, [r7, #32]
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	723b      	strb	r3, [r7, #8]
 80008e2:	8c3b      	ldrh	r3, [r7, #32]
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	727b      	strb	r3, [r7, #9]
    uint8_t *line = malloc(w * sizeof(pixel));
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fd67 	bl	80033c0 <malloc>
 80008f2:	4603      	mov	r3, r0
 80008f4:	60fb      	str	r3, [r7, #12]
    for(x = 0; x < w; ++x)
 80008f6:	2300      	movs	r3, #0
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	e008      	b.n	800090e <ST7735_FillRectangleFast+0xb6>
    	memcpy(line + x * sizeof(pixel), pixel, sizeof(pixel));
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	893a      	ldrh	r2, [r7, #8]
 8000906:	801a      	strh	r2, [r3, #0]
    for(x = 0; x < w; ++x)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	3301      	adds	r3, #1
 800090c:	80fb      	strh	r3, [r7, #6]
 800090e:	88fa      	ldrh	r2, [r7, #6]
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	429a      	cmp	r2, r3
 8000914:	d3f2      	bcc.n	80008fc <ST7735_FillRectangleFast+0xa4>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2102      	movs	r1, #2
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <ST7735_FillRectangleFast+0x100>)
 800091c:	f000 ff78 	bl	8001810 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 8000920:	883b      	ldrh	r3, [r7, #0]
 8000922:	80bb      	strh	r3, [r7, #4]
 8000924:	e00b      	b.n	800093e <ST7735_FillRectangleFast+0xe6>
        HAL_SPI_Transmit(&ST7735_SPI_PORT, line, w * sizeof(pixel), HAL_MAX_DELAY);
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	b29a      	uxth	r2, r3
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	68f9      	ldr	r1, [r7, #12]
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <ST7735_FillRectangleFast+0x104>)
 8000934:	f002 fb5a 	bl	8002fec <HAL_SPI_Transmit>
    for(y = h; y > 0; y--)
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	88bb      	ldrh	r3, [r7, #4]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f0      	bne.n	8000926 <ST7735_FillRectangleFast+0xce>

    free(line);
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f002 fd43 	bl	80033d0 <free>
    ST7735_Unselect();
 800094a:	f7ff fc0b 	bl	8000164 <ST7735_Unselect>
 800094e:	e000      	b.n	8000952 <ST7735_FillRectangleFast+0xfa>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000950:	bf00      	nop
}
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40010c00 	.word	0x40010c00
 800095c:	20000094 	.word	0x20000094

08000960 <ST7735_FillScreenFast>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_FillScreenFast(uint16_t color) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af02      	add	r7, sp, #8
 8000966:	4603      	mov	r3, r0
 8000968:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	23a0      	movs	r3, #160	; 0xa0
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	2100      	movs	r1, #0
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff6f 	bl	8000858 <ST7735_FillRectangleFast>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <main>:
#define DC_PIN  GPIO_PIN_9
#define RST_PORT GPIOC
#define RST_PIN  GPIO_PIN_13

int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af04      	add	r7, sp, #16
  HAL_Init();
 800098a:	f000 fc53 	bl	8001234 <HAL_Init>
  SystemClock_Config();
 800098e:	f000 fa0f 	bl	8000db0 <SystemClock_Config>
  MX_GPIO_Init();
 8000992:	f000 fadf 	bl	8000f54 <MX_GPIO_Init>
  MX_RTC_Init();
 8000996:	f000 fa5f 	bl	8000e58 <MX_RTC_Init>
  MX_SPI1_Init();
 800099a:	f000 faa5 	bl	8000ee8 <MX_SPI1_Init>
  ST7735_Init();
 800099e:	f7ff fcb3 	bl	8000308 <ST7735_Init>
  time.Hours = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1);
 80009a2:	2101      	movs	r1, #1
 80009a4:	48ba      	ldr	r0, [pc, #744]	; (8000c90 <main+0x30c>)
 80009a6:	f002 fa81 	bl	8002eac <HAL_RTCEx_BKUPRead>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4bb9      	ldr	r3, [pc, #740]	; (8000c94 <main+0x310>)
 80009b0:	701a      	strb	r2, [r3, #0]
  time.Minutes = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80009b2:	2102      	movs	r1, #2
 80009b4:	48b6      	ldr	r0, [pc, #728]	; (8000c90 <main+0x30c>)
 80009b6:	f002 fa79 	bl	8002eac <HAL_RTCEx_BKUPRead>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4bb5      	ldr	r3, [pc, #724]	; (8000c94 <main+0x310>)
 80009c0:	705a      	strb	r2, [r3, #1]
  time.Seconds = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80009c2:	2103      	movs	r1, #3
 80009c4:	48b2      	ldr	r0, [pc, #712]	; (8000c90 <main+0x30c>)
 80009c6:	f002 fa71 	bl	8002eac <HAL_RTCEx_BKUPRead>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4bb1      	ldr	r3, [pc, #708]	; (8000c94 <main+0x310>)
 80009d0:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80009d2:	2200      	movs	r2, #0
 80009d4:	49af      	ldr	r1, [pc, #700]	; (8000c94 <main+0x310>)
 80009d6:	48ae      	ldr	r0, [pc, #696]	; (8000c90 <main+0x30c>)
 80009d8:	f001 fd32 	bl	8002440 <HAL_RTC_SetTime>

  sprintf(display_time,"%02d:%02d:%02d",time.Hours,time.Minutes,time.Hours);
 80009dc:	4bad      	ldr	r3, [pc, #692]	; (8000c94 <main+0x310>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4bac      	ldr	r3, [pc, #688]	; (8000c94 <main+0x310>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4baa      	ldr	r3, [pc, #680]	; (8000c94 <main+0x310>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	460b      	mov	r3, r1
 80009f0:	49a9      	ldr	r1, [pc, #676]	; (8000c98 <main+0x314>)
 80009f2:	48aa      	ldr	r0, [pc, #680]	; (8000c9c <main+0x318>)
 80009f4:	f002 fda0 	bl	8003538 <siprintf>

  date.Year = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80009f8:	2104      	movs	r1, #4
 80009fa:	48a5      	ldr	r0, [pc, #660]	; (8000c90 <main+0x30c>)
 80009fc:	f002 fa56 	bl	8002eac <HAL_RTCEx_BKUPRead>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4ba6      	ldr	r3, [pc, #664]	; (8000ca0 <main+0x31c>)
 8000a06:	70da      	strb	r2, [r3, #3]
  date.Month = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5);
 8000a08:	2105      	movs	r1, #5
 8000a0a:	48a1      	ldr	r0, [pc, #644]	; (8000c90 <main+0x30c>)
 8000a0c:	f002 fa4e 	bl	8002eac <HAL_RTCEx_BKUPRead>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4ba2      	ldr	r3, [pc, #648]	; (8000ca0 <main+0x31c>)
 8000a16:	705a      	strb	r2, [r3, #1]
  date.Date = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6);
 8000a18:	2106      	movs	r1, #6
 8000a1a:	489d      	ldr	r0, [pc, #628]	; (8000c90 <main+0x30c>)
 8000a1c:	f002 fa46 	bl	8002eac <HAL_RTCEx_BKUPRead>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b9e      	ldr	r3, [pc, #632]	; (8000ca0 <main+0x31c>)
 8000a26:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	499d      	ldr	r1, [pc, #628]	; (8000ca0 <main+0x31c>)
 8000a2c:	4898      	ldr	r0, [pc, #608]	; (8000c90 <main+0x30c>)
 8000a2e:	f001 fe77 	bl	8002720 <HAL_RTC_SetDate>
   char min_arry[2];
   char hrs_arry[2];
   char date_arry[2];
   char year_arry[5];

   ST7735_FillScreenFast(0xFCE0);
 8000a32:	f64f 40e0 	movw	r0, #64736	; 0xfce0
 8000a36:	f7ff ff93 	bl	8000960 <ST7735_FillScreenFast>
   ST7735_drawCircle(62, 125, 23, 0x82A3);
 8000a3a:	f248 23a3 	movw	r3, #33443	; 0x82a3
 8000a3e:	2217      	movs	r2, #23
 8000a40:	217d      	movs	r1, #125	; 0x7d
 8000a42:	203e      	movs	r0, #62	; 0x3e
 8000a44:	f7ff fe34 	bl	80006b0 <ST7735_drawCircle>
   ST7735_drawCircle(62, 125, 20, 0x82A3);
 8000a48:	f248 23a3 	movw	r3, #33443	; 0x82a3
 8000a4c:	2214      	movs	r2, #20
 8000a4e:	217d      	movs	r1, #125	; 0x7d
 8000a50:	203e      	movs	r0, #62	; 0x3e
 8000a52:	f7ff fe2d 	bl	80006b0 <ST7735_drawCircle>
   ST7735_drawLine(62, 125, 49, 125, 0x82A3);
 8000a56:	f248 23a3 	movw	r3, #33443	; 0x82a3
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	237d      	movs	r3, #125	; 0x7d
 8000a5e:	2231      	movs	r2, #49	; 0x31
 8000a60:	217d      	movs	r1, #125	; 0x7d
 8000a62:	203e      	movs	r0, #62	; 0x3e
 8000a64:	f7ff fd5f 	bl	8000526 <ST7735_drawLine>
   ST7735_drawLine(62, 125, 72, 110, 0x82A3);
 8000a68:	f248 23a3 	movw	r3, #33443	; 0x82a3
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	236e      	movs	r3, #110	; 0x6e
 8000a70:	2248      	movs	r2, #72	; 0x48
 8000a72:	217d      	movs	r1, #125	; 0x7d
 8000a74:	203e      	movs	r0, #62	; 0x3e
 8000a76:	f7ff fd56 	bl	8000526 <ST7735_drawLine>

    while (1)
     {
       HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4985      	ldr	r1, [pc, #532]	; (8000c94 <main+0x310>)
 8000a7e:	4884      	ldr	r0, [pc, #528]	; (8000c90 <main+0x30c>)
 8000a80:	f001 fd76 	bl	8002570 <HAL_RTC_GetTime>
       HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000a84:	2200      	movs	r2, #0
 8000a86:	4986      	ldr	r1, [pc, #536]	; (8000ca0 <main+0x31c>)
 8000a88:	4881      	ldr	r0, [pc, #516]	; (8000c90 <main+0x30c>)
 8000a8a:	f001 feff 	bl	800288c <HAL_RTC_GetDate>
       sec_arry[0]='0'+(time.Seconds/10);
 8000a8e:	4b81      	ldr	r3, [pc, #516]	; (8000c94 <main+0x310>)
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	4a84      	ldr	r2, [pc, #528]	; (8000ca4 <main+0x320>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	3330      	adds	r3, #48	; 0x30
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
       sec_arry[1]='0'+(time.Seconds%10);
 8000aa4:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <main+0x310>)
 8000aa6:	789a      	ldrb	r2, [r3, #2]
 8000aa8:	4b7e      	ldr	r3, [pc, #504]	; (8000ca4 <main+0x320>)
 8000aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8000aae:	08d9      	lsrs	r1, r3, #3
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	3330      	adds	r3, #48	; 0x30
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
       min_arry[0]='0'+(time.Minutes/10);
 8000ac4:	4b73      	ldr	r3, [pc, #460]	; (8000c94 <main+0x310>)
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	4a76      	ldr	r2, [pc, #472]	; (8000ca4 <main+0x320>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3330      	adds	r3, #48	; 0x30
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f887 3020 	strb.w	r3, [r7, #32]
       min_arry[1]='0'+(time.Minutes%10);
 8000ada:	4b6e      	ldr	r3, [pc, #440]	; (8000c94 <main+0x310>)
 8000adc:	785a      	ldrb	r2, [r3, #1]
 8000ade:	4b71      	ldr	r3, [pc, #452]	; (8000ca4 <main+0x320>)
 8000ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae4:	08d9      	lsrs	r1, r3, #3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3330      	adds	r3, #48	; 0x30
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
       hrs_arry[0]='0'+(time.Hours/10);
 8000afa:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <main+0x310>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	4a69      	ldr	r2, [pc, #420]	; (8000ca4 <main+0x320>)
 8000b00:	fba2 2303 	umull	r2, r3, r2, r3
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	3330      	adds	r3, #48	; 0x30
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	773b      	strb	r3, [r7, #28]
       hrs_arry[1]='0'+(time.Hours%10);
 8000b0e:	4b61      	ldr	r3, [pc, #388]	; (8000c94 <main+0x310>)
 8000b10:	781a      	ldrb	r2, [r3, #0]
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <main+0x320>)
 8000b14:	fba3 1302 	umull	r1, r3, r3, r2
 8000b18:	08d9      	lsrs	r1, r3, #3
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3330      	adds	r3, #48	; 0x30
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	777b      	strb	r3, [r7, #29]
       date_arry[0]='0'+(date.Date/10);
 8000b2c:	4b5c      	ldr	r3, [pc, #368]	; (8000ca0 <main+0x31c>)
 8000b2e:	789b      	ldrb	r3, [r3, #2]
 8000b30:	4a5c      	ldr	r2, [pc, #368]	; (8000ca4 <main+0x320>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	3330      	adds	r3, #48	; 0x30
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	763b      	strb	r3, [r7, #24]
       date_arry[1]='0'+(date.Date%10);
 8000b40:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <main+0x31c>)
 8000b42:	789a      	ldrb	r2, [r3, #2]
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <main+0x320>)
 8000b46:	fba3 1302 	umull	r1, r3, r3, r2
 8000b4a:	08d9      	lsrs	r1, r3, #3
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	3330      	adds	r3, #48	; 0x30
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	767b      	strb	r3, [r7, #25]
       year_arry[0]='2';
 8000b5e:	2332      	movs	r3, #50	; 0x32
 8000b60:	743b      	strb	r3, [r7, #16]
       year_arry[1]='0';
 8000b62:	2330      	movs	r3, #48	; 0x30
 8000b64:	747b      	strb	r3, [r7, #17]
       year_arry[2]='0'+(date.Year/10);
 8000b66:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <main+0x31c>)
 8000b68:	78db      	ldrb	r3, [r3, #3]
 8000b6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ca4 <main+0x320>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	74bb      	strb	r3, [r7, #18]
       year_arry[3]='0'+(date.Year%10);
 8000b7a:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <main+0x31c>)
 8000b7c:	78da      	ldrb	r2, [r3, #3]
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <main+0x320>)
 8000b80:	fba3 1302 	umull	r1, r3, r3, r2
 8000b84:	08d9      	lsrs	r1, r3, #3
 8000b86:	460b      	mov	r3, r1
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	3330      	adds	r3, #48	; 0x30
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	74fb      	strb	r3, [r7, #19]
       year_arry[4]='\0';
 8000b98:	2300      	movs	r3, #0
 8000b9a:	753b      	strb	r3, [r7, #20]
       char month[10];
       sprintf(month,"%02d",date.Month);
 8000b9c:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <main+0x31c>)
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4940      	ldr	r1, [pc, #256]	; (8000ca8 <main+0x324>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fcc6 	bl	8003538 <siprintf>
       ST7735_WriteString(34, 10, "Clock", Font_11x18, 0x82A3, 0xEF1C);
 8000bac:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <main+0x328>)
 8000bae:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000bb2:	9202      	str	r2, [sp, #8]
 8000bb4:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	9200      	str	r2, [sp, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <main+0x32c>)
 8000bc2:	210a      	movs	r1, #10
 8000bc4:	2022      	movs	r0, #34	; 0x22
 8000bc6:	f7ff fc64 	bl	8000492 <ST7735_WriteString>

       ST7735_WriteString(20, 45, hrs_arry,Font_11x18 , 0x82A3,0xEF1C);
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <main+0x328>)
 8000bcc:	f107 011c 	add.w	r1, r7, #28
 8000bd0:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000bd4:	9202      	str	r2, [sp, #8]
 8000bd6:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000bda:	9201      	str	r2, [sp, #4]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	460a      	mov	r2, r1
 8000be4:	212d      	movs	r1, #45	; 0x2d
 8000be6:	2014      	movs	r0, #20
 8000be8:	f7ff fc53 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(40, 45, ":",Font_11x18 ,  0x82A3,0xEF1C);
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <main+0x328>)
 8000bee:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000bf2:	9202      	str	r2, [sp, #8]
 8000bf4:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000bf8:	9201      	str	r2, [sp, #4]
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	9200      	str	r2, [sp, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a2c      	ldr	r2, [pc, #176]	; (8000cb4 <main+0x330>)
 8000c02:	212d      	movs	r1, #45	; 0x2d
 8000c04:	2028      	movs	r0, #40	; 0x28
 8000c06:	f7ff fc44 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(50, 45, min_arry,Font_11x18 ,  0x82A3,0xEF1C);
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <main+0x328>)
 8000c0c:	f107 0120 	add.w	r1, r7, #32
 8000c10:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000c14:	9202      	str	r2, [sp, #8]
 8000c16:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000c1a:	9201      	str	r2, [sp, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	9200      	str	r2, [sp, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	460a      	mov	r2, r1
 8000c24:	212d      	movs	r1, #45	; 0x2d
 8000c26:	2032      	movs	r0, #50	; 0x32
 8000c28:	f7ff fc33 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(70, 45, ":",Font_11x18 , 0x82A3,0xEF1C);
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <main+0x328>)
 8000c2e:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000c32:	9202      	str	r2, [sp, #8]
 8000c34:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000c38:	9201      	str	r2, [sp, #4]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <main+0x330>)
 8000c42:	212d      	movs	r1, #45	; 0x2d
 8000c44:	2046      	movs	r0, #70	; 0x46
 8000c46:	f7ff fc24 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(80, 45, sec_arry,Font_11x18 , 0x82A3,0xEF1C);
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <main+0x328>)
 8000c4c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c50:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000c54:	9202      	str	r2, [sp, #8]
 8000c56:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000c5a:	9201      	str	r2, [sp, #4]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	9200      	str	r2, [sp, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	460a      	mov	r2, r1
 8000c64:	212d      	movs	r1, #45	; 0x2d
 8000c66:	2050      	movs	r0, #80	; 0x50
 8000c68:	f7ff fc13 	bl	8000492 <ST7735_WriteString>

       ST7735_WriteString(15, 80, date_arry, Font_11x18,  0x82A3,0xEF1C);
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <main+0x328>)
 8000c6e:	f107 0118 	add.w	r1, r7, #24
 8000c72:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000c76:	9202      	str	r2, [sp, #8]
 8000c78:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000c7c:	9201      	str	r2, [sp, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	460a      	mov	r2, r1
 8000c86:	2150      	movs	r1, #80	; 0x50
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f7ff fc02 	bl	8000492 <ST7735_WriteString>
 8000c8e:	e013      	b.n	8000cb8 <main+0x334>
 8000c90:	20000080 	.word	0x20000080
 8000c94:	200000ec 	.word	0x200000ec
 8000c98:	08003d5c 	.word	0x08003d5c
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	200000f0 	.word	0x200000f0
 8000ca4:	cccccccd 	.word	0xcccccccd
 8000ca8:	08003d6c 	.word	0x08003d6c
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	08003d74 	.word	0x08003d74
 8000cb4:	08003d7c 	.word	0x08003d7c
       ST7735_WriteString(35, 80, "/",Font_11x18 , 0x82A3, 0xEF1C);
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <main+0x418>)
 8000cba:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000cc4:	9201      	str	r2, [sp, #4]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	9200      	str	r2, [sp, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a34      	ldr	r2, [pc, #208]	; (8000da0 <main+0x41c>)
 8000cce:	2150      	movs	r1, #80	; 0x50
 8000cd0:	2023      	movs	r0, #35	; 0x23
 8000cd2:	f7ff fbde 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(45, 80, month, Font_11x18,  0x82A3, 0xEF1C);
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <main+0x418>)
 8000cd8:	1d39      	adds	r1, r7, #4
 8000cda:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000cde:	9202      	str	r2, [sp, #8]
 8000ce0:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000ce4:	9201      	str	r2, [sp, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	9200      	str	r2, [sp, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	460a      	mov	r2, r1
 8000cee:	2150      	movs	r1, #80	; 0x50
 8000cf0:	202d      	movs	r0, #45	; 0x2d
 8000cf2:	f7ff fbce 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(65, 80, "/",Font_11x18 ,  0x82A3, 0xEF1C);
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <main+0x418>)
 8000cf8:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000cfc:	9202      	str	r2, [sp, #8]
 8000cfe:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000d02:	9201      	str	r2, [sp, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	9200      	str	r2, [sp, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <main+0x41c>)
 8000d0c:	2150      	movs	r1, #80	; 0x50
 8000d0e:	2041      	movs	r0, #65	; 0x41
 8000d10:	f7ff fbbf 	bl	8000492 <ST7735_WriteString>
       ST7735_WriteString(75, 80, year_arry, Font_11x18, 0x82A3, 0xEF1C);
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <main+0x418>)
 8000d16:	f107 0110 	add.w	r1, r7, #16
 8000d1a:	f64e 721c 	movw	r2, #61212	; 0xef1c
 8000d1e:	9202      	str	r2, [sp, #8]
 8000d20:	f248 22a3 	movw	r2, #33443	; 0x82a3
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	9200      	str	r2, [sp, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	2150      	movs	r1, #80	; 0x50
 8000d30:	204b      	movs	r0, #75	; 0x4b
 8000d32:	f7ff fbae 	bl	8000492 <ST7735_WriteString>

       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, time.Hours);
 8000d36:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <main+0x420>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	481a      	ldr	r0, [pc, #104]	; (8000da8 <main+0x424>)
 8000d40:	f002 f89a 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, time.Minutes);
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <main+0x420>)
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4816      	ldr	r0, [pc, #88]	; (8000da8 <main+0x424>)
 8000d4e:	f002 f893 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, time.Seconds);
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <main+0x420>)
 8000d54:	789b      	ldrb	r3, [r3, #2]
 8000d56:	461a      	mov	r2, r3
 8000d58:	2103      	movs	r1, #3
 8000d5a:	4813      	ldr	r0, [pc, #76]	; (8000da8 <main+0x424>)
 8000d5c:	f002 f88c 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, date.Year);
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <main+0x428>)
 8000d62:	78db      	ldrb	r3, [r3, #3]
 8000d64:	461a      	mov	r2, r3
 8000d66:	2104      	movs	r1, #4
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <main+0x424>)
 8000d6a:	f002 f885 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, date.Month);
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <main+0x428>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	461a      	mov	r2, r3
 8000d74:	2105      	movs	r1, #5
 8000d76:	480c      	ldr	r0, [pc, #48]	; (8000da8 <main+0x424>)
 8000d78:	f002 f87e 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <main+0x428>)
 8000d7e:	789b      	ldrb	r3, [r3, #2]
 8000d80:	461a      	mov	r2, r3
 8000d82:	2106      	movs	r1, #6
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <main+0x424>)
 8000d86:	f002 f877 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, date.WeekDay);
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <main+0x428>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2107      	movs	r1, #7
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <main+0x424>)
 8000d94:	f002 f870 	bl	8002e78 <HAL_RTCEx_BKUPWrite>
     {
 8000d98:	e66f      	b.n	8000a7a <main+0xf6>
 8000d9a:	bf00      	nop
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	08003d80 	.word	0x08003d80
 8000da4:	200000ec 	.word	0x200000ec
 8000da8:	20000080 	.word	0x20000080
 8000dac:	200000f0 	.word	0x200000f0

08000db0 <SystemClock_Config>:

  }
  /* USER CODE END 3 */
}
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fbda 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000de0:	230a      	movs	r3, #10
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fd2d 	bl	8001858 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e04:	f000 f8f2 	bl	8000fec <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 ff9a 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2e:	f000 f8dd 	bl	8000fec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e32:	2301      	movs	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f906 	bl	8002050 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e4a:	f000 f8cf 	bl	8000fec <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	; 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_RTC_Init>:
static void MX_RTC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	  /* USER CODE END RTC_Init 1 */

	  /** Initialize RTC Only
	  */
	  hrtc.Instance = RTC;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_RTC_Init+0x80>)
 8000e5e:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <MX_RTC_Init+0x84>)
 8000e60:	601a      	str	r2, [r3, #0]
	  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_RTC_Init+0x80>)
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	605a      	str	r2, [r3, #4]
	  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_RTC_Init+0x80>)
 8000e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e70:	609a      	str	r2, [r3, #8]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <MX_RTC_Init+0x80>)
 8000e74:	f001 fa58 	bl	8002328 <HAL_RTC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_RTC_Init+0x2a>
	  {
	    Error_Handler();
 8000e7e:	f000 f8b5 	bl	8000fec <Error_Handler>
	  }
	  time.Hours = 0x15;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_RTC_Init+0x88>)
 8000e84:	2215      	movs	r2, #21
 8000e86:	701a      	strb	r2, [r3, #0]
	  	  time.Minutes = 0x2B;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_RTC_Init+0x88>)
 8000e8a:	222b      	movs	r2, #43	; 0x2b
 8000e8c:	705a      	strb	r2, [r3, #1]
	  	  time.Seconds = 0x10;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_RTC_Init+0x88>)
 8000e90:	2210      	movs	r2, #16
 8000e92:	709a      	strb	r2, [r3, #2]
	  if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK)
 8000e94:	2200      	movs	r2, #0
 8000e96:	4912      	ldr	r1, [pc, #72]	; (8000ee0 <MX_RTC_Init+0x88>)
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <MX_RTC_Init+0x80>)
 8000e9a:	f001 fad1 	bl	8002440 <HAL_RTC_SetTime>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_RTC_Init+0x50>
	  {
	    Error_Handler();
 8000ea4:	f000 f8a2 	bl	8000fec <Error_Handler>
  }
  date.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	701a      	strb	r2, [r3, #0]
  date.Month = RTC_MONTH_APRIL;
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	705a      	strb	r2, [r3, #1]
  date.Date = 0xA;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	709a      	strb	r2, [r3, #2]
  date.Year = 0x18;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000ebc:	2218      	movs	r2, #24
 8000ebe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_RTC_Init+0x80>)
 8000ec6:	f001 fc2b 	bl	8002720 <HAL_RTC_SetDate>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ed0:	f000 f88c 	bl	8000fec <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000080 	.word	0x20000080
 8000edc:	40002800 	.word	0x40002800
 8000ee0:	200000ec 	.word	0x200000ec
 8000ee4:	200000f0 	.word	0x200000f0

08000ee8 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f001 ffd3 	bl	8002ee4 <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f000 f852 	bl	8000fec <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000094 	.word	0x20000094
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f6e:	f043 0320 	orr.w	r3, r3, #32
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f86:	f043 0304 	orr.w	r3, r3, #4
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_GPIO_Init+0x90>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f640 0103 	movw	r1, #2051	; 0x803
 8000fb6:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_GPIO_Init+0x94>)
 8000fb8:	f000 fc2a 	bl	8001810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11;
 8000fbc:	f640 0303 	movw	r3, #2051	; 0x803
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_GPIO_Init+0x94>)
 8000fd6:	f000 fa97 	bl	8001508 <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010c00 	.word	0x40010c00

08000fec <Error_Handler>:
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_MspInit+0x5c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_MspInit+0x5c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x5c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x5c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_MspInit+0x60>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_MspInit+0x60>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000

0800105c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_RTC_MspInit+0x3c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d110      	bne.n	8001090 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800106e:	f000 fbe7 	bl	8001840 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_RTC_MspInit+0x40>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_RTC_MspInit+0x40>)
 8001078:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_RTC_MspInit+0x40>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_RTC_MspInit+0x44>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40002800 	.word	0x40002800
 800109c:	40021000 	.word	0x40021000
 80010a0:	4242043c 	.word	0x4242043c

080010a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <HAL_SPI_MspInit+0x70>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d123      	bne.n	800110c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_SPI_MspInit+0x74>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a13      	ldr	r2, [pc, #76]	; (8001118 <HAL_SPI_MspInit+0x74>)
 80010ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_SPI_MspInit+0x74>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_SPI_MspInit+0x74>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <HAL_SPI_MspInit+0x74>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_SPI_MspInit+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010f4:	23a0      	movs	r3, #160	; 0xa0
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_SPI_MspInit+0x78>)
 8001108:	f000 f9fe 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013000 	.word	0x40013000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f8ab 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f002 fa02 	bl	80035a8 <__errno>
 80011a4:	4603      	mov	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20005000 	.word	0x20005000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000114 	.word	0x20000114
 80011d8:	20000268 	.word	0x20000268

080011dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff fff8 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ee:	490c      	ldr	r1, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001204:	4c09      	ldr	r4, [pc, #36]	; (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f002 f9cf 	bl	80035b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001216:	f7ff fbb5 	bl	8000984 <main>
  bx lr
 800121a:	4770      	bx	lr
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001224:	08004bd4 	.word	0x08004bd4
  ldr r2, =_sbss
 8001228:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800122c:	20000264 	.word	0x20000264

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f92b 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fed2 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f935 	bl	80014ee <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f90b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000010 	.word	0x20000010
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_IncTick+0x20>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000010 	.word	0x20000010
 80012e0:	20000118 	.word	0x20000118

080012e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000118 	.word	0x20000118

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fff0 	bl	80012e4 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffe0 	bl	80012e4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000010 	.word	0x20000010

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff90 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff49 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff5e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffb0 	bl	800145c <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e169      	b.n	80017f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8158 	bne.w	80017ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a9a      	ldr	r2, [pc, #616]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001544:	4a98      	ldr	r2, [pc, #608]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d875      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800154a:	4a98      	ldr	r2, [pc, #608]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d058      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001550:	4a96      	ldr	r2, [pc, #600]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d86f      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001556:	4a96      	ldr	r2, [pc, #600]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d052      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 800155c:	4a94      	ldr	r2, [pc, #592]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d869      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001562:	4a94      	ldr	r2, [pc, #592]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04c      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001568:	4a92      	ldr	r2, [pc, #584]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d863      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800156e:	4a92      	ldr	r2, [pc, #584]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d046      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001574:	4a90      	ldr	r2, [pc, #576]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d85d      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d82a      	bhi.n	80015d4 <HAL_GPIO_Init+0xcc>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d859      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <HAL_GPIO_Init+0x80>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001603 	.word	0x08001603
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015ef 	.word	0x080015ef
 8001594:	08001631 	.word	0x08001631
 8001598:	08001637 	.word	0x08001637
 800159c:	08001637 	.word	0x08001637
 80015a0:	08001637 	.word	0x08001637
 80015a4:	08001637 	.word	0x08001637
 80015a8:	08001637 	.word	0x08001637
 80015ac:	08001637 	.word	0x08001637
 80015b0:	08001637 	.word	0x08001637
 80015b4:	08001637 	.word	0x08001637
 80015b8:	08001637 	.word	0x08001637
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001637 	.word	0x08001637
 80015c4:	08001637 	.word	0x08001637
 80015c8:	08001637 	.word	0x08001637
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	4a79      	ldr	r2, [pc, #484]	; (80017bc <HAL_GPIO_Init+0x2b4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015da:	e02c      	b.n	8001636 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e029      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e024      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	3308      	adds	r3, #8
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e01f      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	330c      	adds	r3, #12
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e01a      	b.n	8001638 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e013      	b.n	8001638 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e009      	b.n	8001638 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e003      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x130>
          break;
 8001636:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d801      	bhi.n	8001642 <HAL_GPIO_Init+0x13a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_Init+0x13e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d802      	bhi.n	8001654 <HAL_GPIO_Init+0x14c>
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x152>
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3b08      	subs	r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80b1 	beq.w	80017ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001688:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <HAL_GPIO_Init+0x2bc>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d013      	beq.n	80016f4 <HAL_GPIO_Init+0x1ec>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3f      	ldr	r2, [pc, #252]	; (80017cc <HAL_GPIO_Init+0x2c4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00d      	beq.n	80016f0 <HAL_GPIO_Init+0x1e8>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a3e      	ldr	r2, [pc, #248]	; (80017d0 <HAL_GPIO_Init+0x2c8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d007      	beq.n	80016ec <HAL_GPIO_Init+0x1e4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <HAL_GPIO_Init+0x2cc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_GPIO_Init+0x1e0>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x1ee>
 80016f4:	2300      	movs	r3, #0
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001706:	492f      	ldr	r1, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x2bc>)
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	492c      	ldr	r1, [pc, #176]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	43db      	mvns	r3, r3
 8001736:	4928      	ldr	r1, [pc, #160]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001738:	4013      	ands	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4922      	ldr	r1, [pc, #136]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	43db      	mvns	r3, r3
 800175e:	491e      	ldr	r1, [pc, #120]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001760:	4013      	ands	r3, r2
 8001762:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4918      	ldr	r1, [pc, #96]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	43db      	mvns	r3, r3
 8001786:	4914      	ldr	r1, [pc, #80]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 8001788:	4013      	ands	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d021      	beq.n	80017dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	490e      	ldr	r1, [pc, #56]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e021      	b.n	80017ea <HAL_GPIO_Init+0x2e2>
 80017a6:	bf00      	nop
 80017a8:	10320000 	.word	0x10320000
 80017ac:	10310000 	.word	0x10310000
 80017b0:	10220000 	.word	0x10220000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	10120000 	.word	0x10120000
 80017bc:	10110000 	.word	0x10110000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	40011000 	.word	0x40011000
 80017d4:	40011400 	.word	0x40011400
 80017d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_GPIO_Init+0x304>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	4909      	ldr	r1, [pc, #36]	; (800180c <HAL_GPIO_Init+0x304>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f47f ae8e 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	372c      	adds	r7, #44	; 0x2c
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40010400 	.word	0x40010400

08001810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800182c:	e003      	b.n	8001836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800182e:	887b      	ldrh	r3, [r7, #2]
 8001830:	041a      	lsls	r2, r3, #16
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	420e0020 	.word	0x420e0020

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e272      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
 8001890:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06c      	beq.n	8001984 <HAL_RCC_OscConfig+0x12c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d168      	bne.n	8001984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e24c      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x76>
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xbc>
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 8001914:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fcd6 	bl	80012e4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fcd2 	bl	80012e4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e200      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe4>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fcc2 	bl	80012e4 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fcbe 	bl	80012e4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1ec      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x10c>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4939      	ldr	r1, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fc77 	bl	80012e4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fc73 	bl	80012e4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1a1      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc56 	bl	80012e4 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc52 	bl	80012e4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e180      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03a      	beq.n	8001adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fc36 	bl	80012e4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc32 	bl	80012e4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e160      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 faba 	bl	8002014 <RCC_Delay>
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fc1c 	bl	80012e4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc18 	bl	80012e4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e146      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	42420000 	.word	0x42420000
 8001acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e9      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a6 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7e      	ldr	r2, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fbd9 	bl	80012e4 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fbd5 	bl	80012e4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e103      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a6e      	ldr	r2, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	e01c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x356>
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fb89 	bl	80012e4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fb85 	bl	80012e4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0b1      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fb73 	bl	80012e4 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fb6f 	bl	80012e4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e09b      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a3b      	ldr	r2, [pc, #236]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d061      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d146      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb43 	bl	80012e4 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fb3f 	bl	80012e4 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e06d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	4921      	ldr	r1, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a19      	ldr	r1, [r3, #32]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	430b      	orrs	r3, r1
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb13 	bl	80012e4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fb0f 	bl	80012e4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e03d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46a>
 8001ce0:	e035      	b.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fafc 	bl	80012e4 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff faf8 	bl	80012e4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e026      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x498>
 8001d0e:	e01e      	b.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e019      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_OscConfig+0x500>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0d0      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4965      	ldr	r1, [pc, #404]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d040      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e073      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fa4a 	bl	80012e4 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff fa46 	bl	80012e4 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e053      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d210      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e032      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f821 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1cc>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f9a8 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08004b58 	.word	0x08004b58
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	2000000c 	.word	0x2000000c

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5e:	e027      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f62:	613b      	str	r3, [r7, #16]
      break;
 8001f64:	e027      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0c5b      	lsrs	r3, r3, #17
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f92:	fb03 f202 	mul.w	r2, r3, r2
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e004      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	613b      	str	r3, [r7, #16]
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	613b      	str	r3, [r7, #16]
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	693b      	ldr	r3, [r7, #16]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	007a1200 	.word	0x007a1200
 8001fcc:	08004b70 	.word	0x08004b70
 8001fd0:	08004b80 	.word	0x08004b80
 8001fd4:	003d0900 	.word	0x003d0900

08001fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff0:	f7ff fff2 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0adb      	lsrs	r3, r3, #11
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4903      	ldr	r1, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08004b68 	.word	0x08004b68

08002014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <RCC_Delay+0x34>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <RCC_Delay+0x38>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0a5b      	lsrs	r3, r3, #9
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002030:	bf00      	nop
  }
  while (Delay --);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e5a      	subs	r2, r3, #1
 8002036:	60fa      	str	r2, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f9      	bne.n	8002030 <RCC_Delay+0x1c>
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000008 	.word	0x20000008
 800204c:	10624dd3 	.word	0x10624dd3

08002050 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d07d      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10d      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002086:	61d3      	str	r3, [r2, #28]
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002094:	2301      	movs	r3, #1
 8002096:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d118      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a42      	ldr	r2, [pc, #264]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b0:	f7ff f918 	bl	80012e4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	e008      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b8:	f7ff f914 	bl	80012e4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	; 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e06d      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d02e      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d027      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d014      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff f8e3 	bl	80012e4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff f8df 	bl	80012e4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e036      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ee      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4917      	ldr	r1, [pc, #92]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	4313      	orrs	r3, r2
 8002154:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002166:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	490b      	ldr	r1, [pc, #44]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4904      	ldr	r1, [pc, #16]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
 80021b8:	42420440 	.word	0x42420440

080021bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	f200 808a 	bhi.w	80022fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d045      	beq.n	8002278 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d075      	beq.n	80022de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80021f2:	e082      	b.n	80022fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80021f4:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80021fa:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d07b      	beq.n	80022fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	0c9b      	lsrs	r3, r3, #18
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d015      	beq.n	800224a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800221e:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0c5b      	lsrs	r3, r3, #17
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e004      	b.n	8002254 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4a34      	ldr	r2, [pc, #208]	; (8002320 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002260:	d102      	bne.n	8002268 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	61bb      	str	r3, [r7, #24]
      break;
 8002266:	e04a      	b.n	80022fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
      break;
 8002276:	e042      	b.n	80022fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002288:	d108      	bne.n	800229c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e01f      	b.n	80022dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a6:	d109      	bne.n	80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80022b4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	e00f      	b.n	80022dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022c6:	d11c      	bne.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d016      	beq.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80022d4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80022d8:	61bb      	str	r3, [r7, #24]
      break;
 80022da:	e012      	b.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80022dc:	e011      	b.n	8002302 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80022de:	f7ff fe85 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0b9b      	lsrs	r3, r3, #14
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	61bb      	str	r3, [r7, #24]
      break;
 80022f8:	e004      	b.n	8002304 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80022fa:	bf00      	nop
 80022fc:	e002      	b.n	8002304 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002302:	bf00      	nop
    }
  }
  return (frequency);
 8002304:	69bb      	ldr	r3, [r7, #24]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	08004b84 	.word	0x08004b84
 8002318:	08004b94 	.word	0x08004b94
 800231c:	007a1200 	.word	0x007a1200
 8002320:	003d0900 	.word	0x003d0900
 8002324:	aaaaaaab 	.word	0xaaaaaaab

08002328 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07a      	b.n	8002434 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	7c5b      	ldrb	r3, [r3, #17]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fe84 	bl	800105c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 faea 	bl	8002934 <HAL_RTC_WaitForSynchro>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e061      	b.n	8002434 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fba3 	bl	8002abc <RTC_EnterInitMode>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2204      	movs	r2, #4
 8002380:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e056      	b.n	8002434 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0207 	bic.w	r2, r2, #7
 8002394:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RTC_Init+0x114>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_RTC_Init+0x114>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RTC_Init+0x114>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4921      	ldr	r1, [pc, #132]	; (800243c <HAL_RTC_Init+0x114>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d003      	beq.n	80023ce <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e00e      	b.n	80023ec <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff fef4 	bl	80021bc <HAL_RCCEx_GetPeriphCLKFreq>
 80023d4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2204      	movs	r2, #4
 80023e0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e026      	b.n	8002434 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	0c1a      	lsrs	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f002 020f 	and.w	r2, r2, #15
 80023f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	b292      	uxth	r2, r2
 8002402:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fb81 	bl	8002b0c <RTC_ExitInitMode>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2204      	movs	r2, #4
 8002414:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00c      	b.n	8002434 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002432:	2300      	movs	r3, #0
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40006c00 	.word	0x40006c00

08002440 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_RTC_SetTime+0x20>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e080      	b.n	8002566 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7c1b      	ldrb	r3, [r3, #16]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_RTC_SetTime+0x30>
 800246c:	2302      	movs	r3, #2
 800246e:	e07a      	b.n	8002566 <HAL_RTC_SetTime+0x126>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2202      	movs	r2, #2
 800247a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d113      	bne.n	80024aa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800248c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	4619      	mov	r1, r3
 8002496:	460b      	mov	r3, r1
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a5b      	subs	r3, r3, r1
 800249c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800249e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80024a4:	4413      	add	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e01e      	b.n	80024e8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fb71 	bl	8002b96 <RTC_Bcd2ToByte>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80024bc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fb66 	bl	8002b96 <RTC_Bcd2ToByte>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024d6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	789b      	ldrb	r3, [r3, #2]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fb5a 	bl	8002b96 <RTC_Bcd2ToByte>
 80024e2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80024e4:	4423      	add	r3, r4
 80024e6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80024e8:	6979      	ldr	r1, [r7, #20]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa7f 	bl	80029ee <RTC_WriteTimeCounter>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2204      	movs	r2, #4
 80024fa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e02f      	b.n	8002566 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0205 	bic.w	r2, r2, #5
 8002514:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fa90 	bl	8002a3c <RTC_ReadAlarmCounter>
 800251c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d018      	beq.n	8002558 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	429a      	cmp	r2, r3
 800252c:	d214      	bcs.n	8002558 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002534:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002538:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fa96 	bl	8002a6e <RTC_WriteAlarmCounter>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2204      	movs	r2, #4
 800254c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e006      	b.n	8002566 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
	...

08002570 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RTC_GetTime+0x28>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b5      	b.n	8002708 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0ac      	b.n	8002708 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f9ed 	bl	800298e <RTC_ReadTimeCounter>
 80025b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_RTC_GetTime+0x1a0>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0adb      	lsrs	r3, r3, #11
 80025c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4b52      	ldr	r3, [pc, #328]	; (8002710 <HAL_RTC_GetTime+0x1a0>)
 80025c6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ca:	0adb      	lsrs	r3, r3, #11
 80025cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_RTC_GetTime+0x1a4>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_RTC_GetTime+0x1a0>)
 80025e8:	fba2 1203 	umull	r1, r2, r2, r3
 80025ec:	0ad2      	lsrs	r2, r2, #11
 80025ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80025f2:	fb01 f202 	mul.w	r2, r1, r2
 80025f6:	1a9a      	subs	r2, r3, r2
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RTC_GetTime+0x1a4>)
 80025fa:	fba3 1302 	umull	r1, r3, r3, r2
 80025fe:	0959      	lsrs	r1, r3, #5
 8002600:	460b      	mov	r3, r1
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a5b      	subs	r3, r3, r1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	1ad1      	subs	r1, r2, r3
 800260a:	b2ca      	uxtb	r2, r1
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b17      	cmp	r3, #23
 8002614:	d955      	bls.n	80026c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_RTC_GetTime+0x1a8>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002622:	6939      	ldr	r1, [r7, #16]
 8002624:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_RTC_GetTime+0x1a8>)
 8002626:	fba3 2301 	umull	r2, r3, r3, r1
 800262a:	091a      	lsrs	r2, r3, #4
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	1aca      	subs	r2, r1, r3
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f9fd 	bl	8002a3c <RTC_ReadAlarmCounter>
 8002642:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d008      	beq.n	800265e <HAL_RTC_GetTime+0xee>
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d904      	bls.n	800265e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	e002      	b.n	8002664 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <HAL_RTC_GetTime+0x1ac>)
 8002668:	fb02 f303 	mul.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f9ba 	bl	80029ee <RTC_WriteTimeCounter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e041      	b.n	8002708 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d00c      	beq.n	80026a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002694:	69f9      	ldr	r1, [r7, #28]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f9e9 	bl	8002a6e <RTC_WriteAlarmCounter>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e030      	b.n	8002708 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026a6:	69f9      	ldr	r1, [r7, #28]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f9e0 	bl	8002a6e <RTC_WriteAlarmCounter>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e027      	b.n	8002708 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80026b8:	6979      	ldr	r1, [r7, #20]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 fa88 	bl	8002bd0 <RTC_DateUpdate>
 80026c0:	e003      	b.n	80026ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d01a      	beq.n	8002706 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fa41 	bl	8002b5c <RTC_ByteToBcd2>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fa38 	bl	8002b5c <RTC_ByteToBcd2>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	789b      	ldrb	r3, [r3, #2]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fa2f 	bl	8002b5c <RTC_ByteToBcd2>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	91a2b3c5 	.word	0x91a2b3c5
 8002714:	88888889 	.word	0x88888889
 8002718:	aaaaaaab 	.word	0xaaaaaaab
 800271c:	00015180 	.word	0x00015180

08002720 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_RTC_SetDate+0x24>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e097      	b.n	8002878 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	7c1b      	ldrb	r3, [r3, #16]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_RTC_SetDate+0x34>
 8002750:	2302      	movs	r3, #2
 8002752:	e091      	b.n	8002878 <HAL_RTC_SetDate+0x158>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2202      	movs	r2, #2
 800275e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	78da      	ldrb	r2, [r3, #3]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	785a      	ldrb	r2, [r3, #1]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	789a      	ldrb	r2, [r3, #2]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	739a      	strb	r2, [r3, #14]
 800277e:	e01a      	b.n	80027b6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	78db      	ldrb	r3, [r3, #3]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa06 	bl	8002b96 <RTC_Bcd2ToByte>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f9fd 	bl	8002b96 <RTC_Bcd2ToByte>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f9f4 	bl	8002b96 <RTC_Bcd2ToByte>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	7bdb      	ldrb	r3, [r3, #15]
 80027ba:	4618      	mov	r0, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	7b59      	ldrb	r1, [r3, #13]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	7b9b      	ldrb	r3, [r3, #14]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f000 fadf 	bl	8002d88 <RTC_WeekDayNum>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	7b1a      	ldrb	r2, [r3, #12]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f8d7 	bl	800298e <RTC_ReadTimeCounter>
 80027e0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <HAL_RTC_SetDate+0x160>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0adb      	lsrs	r3, r3, #11
 80027ec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b18      	cmp	r3, #24
 80027f2:	d93a      	bls.n	800286a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4a23      	ldr	r2, [pc, #140]	; (8002884 <HAL_RTC_SetDate+0x164>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	4a22      	ldr	r2, [pc, #136]	; (8002888 <HAL_RTC_SetDate+0x168>)
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800280a:	69f9      	ldr	r1, [r7, #28]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f8ee 	bl	80029ee <RTC_WriteTimeCounter>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2204      	movs	r2, #4
 800281c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e027      	b.n	8002878 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f907 	bl	8002a3c <RTC_ReadAlarmCounter>
 800282e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d018      	beq.n	800286a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	d214      	bcs.n	800286a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002846:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800284a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800284c:	69b9      	ldr	r1, [r7, #24]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f90d 	bl	8002a6e <RTC_WriteAlarmCounter>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2204      	movs	r2, #4
 800285e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e006      	b.n	8002878 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	91a2b3c5 	.word	0x91a2b3c5
 8002884:	aaaaaaab 	.word	0xaaaaaaab
 8002888:	00015180 	.word	0x00015180

0800288c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2100      	movs	r1, #0
 800289e:	460a      	mov	r2, r1
 80028a0:	801a      	strh	r2, [r3, #0]
 80028a2:	460a      	mov	r2, r1
 80028a4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_RTC_GetDate+0x26>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e03a      	b.n	800292c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2200      	movs	r2, #0
 80028bc:	4619      	mov	r1, r3
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff fe56 	bl	8002570 <HAL_RTC_GetTime>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e02e      	b.n	800292c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	7b1a      	ldrb	r2, [r3, #12]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	7bda      	ldrb	r2, [r3, #15]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	7b5a      	ldrb	r2, [r3, #13]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	7b9a      	ldrb	r2, [r3, #14]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01a      	beq.n	800292a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	78db      	ldrb	r3, [r3, #3]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f92f 	bl	8002b5c <RTC_ByteToBcd2>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f926 	bl	8002b5c <RTC_ByteToBcd2>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	789b      	ldrb	r3, [r3, #2]
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f91d 	bl	8002b5c <RTC_ByteToBcd2>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e01d      	b.n	8002986 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0208 	bic.w	r2, r2, #8
 8002958:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800295a:	f7fe fcc3 	bl	80012e4 <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002960:	e009      	b.n	8002976 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002962:	f7fe fcbf 	bl	80012e4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002970:	d901      	bls.n	8002976 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e007      	b.n	8002986 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ee      	beq.n	8002962 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800298e:	b480      	push	{r7}
 8002990:	b087      	sub	sp, #28
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	827b      	strh	r3, [r7, #18]
 800299a:	2300      	movs	r3, #0
 800299c:	823b      	strh	r3, [r7, #16]
 800299e:	2300      	movs	r3, #0
 80029a0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80029be:	8a7a      	ldrh	r2, [r7, #18]
 80029c0:	8a3b      	ldrh	r3, [r7, #16]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d008      	beq.n	80029d8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80029c6:	8a3b      	ldrh	r3, [r7, #16]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e004      	b.n	80029e2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80029d8:	8a7b      	ldrh	r3, [r7, #18]
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	89fb      	ldrh	r3, [r7, #14]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80029e2:	697b      	ldr	r3, [r7, #20]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f85d 	bl	8002abc <RTC_EnterInitMode>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e011      	b.n	8002a32 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	0c12      	lsrs	r2, r2, #16
 8002a16:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b292      	uxth	r2, r2
 8002a20:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f872 	bl	8002b0c <RTC_ExitInitMode>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	81fb      	strh	r3, [r7, #14]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	041a      	lsls	r2, r3, #16
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr

08002a6e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f81d 	bl	8002abc <RTC_EnterInitMode>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	e011      	b.n	8002ab2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	0c12      	lsrs	r2, r2, #16
 8002a96:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f832 	bl	8002b0c <RTC_ExitInitMode>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002ac8:	f7fe fc0c 	bl	80012e4 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ace:	e009      	b.n	8002ae4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ad0:	f7fe fc08 	bl	80012e4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ade:	d901      	bls.n	8002ae4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e00f      	b.n	8002b04 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0210 	orr.w	r2, r2, #16
 8002b00:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0210 	bic.w	r2, r2, #16
 8002b26:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b28:	f7fe fbdc 	bl	80012e4 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b2e:	e009      	b.n	8002b44 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b30:	f7fe fbd8 	bl	80012e4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3e:	d901      	bls.n	8002b44 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e007      	b.n	8002b54 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0ee      	beq.n	8002b30 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002b6a:	e005      	b.n	8002b78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	3b0a      	subs	r3, #10
 8002b76:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d8f6      	bhi.n	8002b6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7bdb      	ldrb	r3, [r3, #15]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7b5b      	ldrb	r3, [r3, #13]
 8002bf4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7b9b      	ldrb	r3, [r3, #14]
 8002bfa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	e06f      	b.n	8002ce2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d011      	beq.n	8002c2c <RTC_DateUpdate+0x5c>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d00e      	beq.n	8002c2c <RTC_DateUpdate+0x5c>
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d00b      	beq.n	8002c2c <RTC_DateUpdate+0x5c>
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d008      	beq.n	8002c2c <RTC_DateUpdate+0x5c>
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d005      	beq.n	8002c2c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d002      	beq.n	8002c2c <RTC_DateUpdate+0x5c>
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d117      	bne.n	8002c5c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b1e      	cmp	r3, #30
 8002c30:	d803      	bhi.n	8002c3a <RTC_DateUpdate+0x6a>
      {
        day++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002c38:	e050      	b.n	8002cdc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d005      	beq.n	8002c4c <RTC_DateUpdate+0x7c>
        {
          month++;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	3301      	adds	r3, #1
 8002c44:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002c46:	2301      	movs	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002c4a:	e047      	b.n	8002cdc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002c50:	2301      	movs	r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
          year++;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002c5a:	e03f      	b.n	8002cdc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d008      	beq.n	8002c74 <RTC_DateUpdate+0xa4>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d005      	beq.n	8002c74 <RTC_DateUpdate+0xa4>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b09      	cmp	r3, #9
 8002c6c:	d002      	beq.n	8002c74 <RTC_DateUpdate+0xa4>
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b0b      	cmp	r3, #11
 8002c72:	d10c      	bne.n	8002c8e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b1d      	cmp	r3, #29
 8002c78:	d803      	bhi.n	8002c82 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002c80:	e02c      	b.n	8002cdc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	3301      	adds	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002c8c:	e026      	b.n	8002cdc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d123      	bne.n	8002cdc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b1b      	cmp	r3, #27
 8002c98:	d803      	bhi.n	8002ca2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e01c      	b.n	8002cdc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b1c      	cmp	r3, #28
 8002ca6:	d111      	bne.n	8002ccc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f839 	bl	8002d24 <RTC_IsLeapYear>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e00d      	b.n	8002cdc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e007      	b.n	8002cdc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b1d      	cmp	r3, #29
 8002cd0:	d104      	bne.n	8002cdc <RTC_DateUpdate+0x10c>
      {
        month++;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d38b      	bcc.n	8002c02 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6978      	ldr	r0, [r7, #20]
 8002d0e:	f000 f83b 	bl	8002d88 <RTC_WeekDayNum>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	731a      	strb	r2, [r3, #12]
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e01d      	b.n	8002d7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <RTC_IsLeapYear+0x60>)
 8002d42:	fba2 1203 	umull	r1, r2, r2, r3
 8002d46:	0952      	lsrs	r2, r2, #5
 8002d48:	2164      	movs	r1, #100	; 0x64
 8002d4a:	fb01 f202 	mul.w	r2, r1, r2
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <RTC_IsLeapYear+0x60>)
 8002d5e:	fba2 1203 	umull	r1, r2, r2, r3
 8002d62:	09d2      	lsrs	r2, r2, #7
 8002d64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002d68:	fb01 f202 	mul.w	r2, r1, r2
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002d78:	2300      	movs	r3, #0
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	51eb851f 	.word	0x51eb851f

08002d88 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
 8002d94:	4613      	mov	r3, r2
 8002d96:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002da6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d82d      	bhi.n	8002e0a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <RTC_WeekDayNum+0xe4>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	085a      	lsrs	r2, r3, #1
 8002dc2:	78bb      	ldrb	r3, [r7, #2]
 8002dc4:	441a      	add	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	441a      	add	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	4926      	ldr	r1, [pc, #152]	; (8002e70 <RTC_WeekDayNum+0xe8>)
 8002dd8:	fba1 1303 	umull	r1, r3, r1, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	1ad2      	subs	r2, r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	4922      	ldr	r1, [pc, #136]	; (8002e70 <RTC_WeekDayNum+0xe8>)
 8002de6:	fba1 1303 	umull	r1, r3, r1, r3
 8002dea:	09db      	lsrs	r3, r3, #7
 8002dec:	4413      	add	r3, r2
 8002dee:	1d1a      	adds	r2, r3, #4
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <RTC_WeekDayNum+0xec>)
 8002df2:	fba3 1302 	umull	r1, r3, r3, r2
 8002df6:	1ad1      	subs	r1, r2, r3
 8002df8:	0849      	lsrs	r1, r1, #1
 8002dfa:	440b      	add	r3, r1
 8002dfc:	0899      	lsrs	r1, r3, #2
 8002dfe:	460b      	mov	r3, r1
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	1a5b      	subs	r3, r3, r1
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e029      	b.n	8002e5e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <RTC_WeekDayNum+0xe4>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	085a      	lsrs	r2, r3, #1
 8002e1e:	78bb      	ldrb	r3, [r7, #2]
 8002e20:	441a      	add	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	441a      	add	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4910      	ldr	r1, [pc, #64]	; (8002e70 <RTC_WeekDayNum+0xe8>)
 8002e30:	fba1 1303 	umull	r1, r3, r1, r3
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	490d      	ldr	r1, [pc, #52]	; (8002e70 <RTC_WeekDayNum+0xe8>)
 8002e3c:	fba1 1303 	umull	r1, r3, r1, r3
 8002e40:	09db      	lsrs	r3, r3, #7
 8002e42:	4413      	add	r3, r2
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <RTC_WeekDayNum+0xec>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	1ad1      	subs	r1, r2, r3
 8002e4e:	0849      	lsrs	r1, r1, #1
 8002e50:	440b      	add	r3, r1
 8002e52:	0899      	lsrs	r1, r3, #2
 8002e54:	460b      	mov	r3, r1
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	1a5b      	subs	r3, r3, r1
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	b2db      	uxtb	r3, r3
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	38e38e39 	.word	0x38e38e39
 8002e70:	51eb851f 	.word	0x51eb851f
 8002e74:	24924925 	.word	0x24924925

08002e78 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8002e88:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RTCEx_BKUPWrite+0x30>)
 8002e8a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40006c00 	.word	0x40006c00

08002eac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8002ebe:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <HAL_RTCEx_BKUPRead+0x34>)
 8002ec0:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40006c00 	.word	0x40006c00

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e076      	b.n	8002fe4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f8b4 	bl	80010a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	0c1a      	lsrs	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f002 0204 	and.w	r2, r2, #4
 8002fc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_SPI_Transmit+0x22>
 800300a:	2302      	movs	r3, #2
 800300c:	e12d      	b.n	800326a <HAL_SPI_Transmit+0x27e>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003016:	f7fe f965 	bl	80012e4 <HAL_GetTick>
 800301a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800302c:	2302      	movs	r3, #2
 800302e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003030:	e116      	b.n	8003260 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_SPI_Transmit+0x52>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003042:	e10d      	b.n	8003260 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2203      	movs	r2, #3
 8003048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308a:	d10f      	bne.n	80030ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d007      	beq.n	80030ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d2:	d14f      	bne.n	8003174 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_Transmit+0xf6>
 80030dc:	8afb      	ldrh	r3, [r7, #22]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d142      	bne.n	8003168 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	1c9a      	adds	r2, r3, #2
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003106:	e02f      	b.n	8003168 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d112      	bne.n	800313c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	86da      	strh	r2, [r3, #54]	; 0x36
 800313a:	e015      	b.n	8003168 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313c:	f7fe f8d2 	bl	80012e4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d803      	bhi.n	8003154 <HAL_SPI_Transmit+0x168>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d102      	bne.n	800315a <HAL_SPI_Transmit+0x16e>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003166:	e07b      	b.n	8003260 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ca      	bne.n	8003108 <HAL_SPI_Transmit+0x11c>
 8003172:	e050      	b.n	8003216 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_SPI_Transmit+0x196>
 800317c:	8afb      	ldrh	r3, [r7, #22]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d144      	bne.n	800320c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031a8:	e030      	b.n	800320c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d113      	bne.n	80031e0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80031de:	e015      	b.n	800320c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e0:	f7fe f880 	bl	80012e4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d803      	bhi.n	80031f8 <HAL_SPI_Transmit+0x20c>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d102      	bne.n	80031fe <HAL_SPI_Transmit+0x212>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800320a:	e029      	b.n	8003260 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1c9      	bne.n	80031aa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8b2 	bl	8003384 <SPI_EndRxTxTransaction>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e003      	b.n	8003260 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003268:	7ffb      	ldrb	r3, [r7, #31]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003284:	f7fe f82e 	bl	80012e4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003294:	f7fe f826 	bl	80012e4 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	e054      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d050      	beq.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b4:	f7fe f816 	bl	80012e4 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d902      	bls.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d111      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ec:	d004      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d107      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d10f      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e017      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d19b      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000008 	.word	0x20000008

08003384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f7ff ff6a 	bl	8003274 <SPI_WaitFlagStateUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e000      	b.n	80033b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <malloc>:
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <malloc+0xc>)
 80033c2:	4601      	mov	r1, r0
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	f000 b82b 	b.w	8003420 <_malloc_r>
 80033ca:	bf00      	nop
 80033cc:	20000060 	.word	0x20000060

080033d0 <free>:
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <free+0xc>)
 80033d2:	4601      	mov	r1, r0
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f000 b913 	b.w	8003600 <_free_r>
 80033da:	bf00      	nop
 80033dc:	20000060 	.word	0x20000060

080033e0 <sbrk_aligned>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0e      	ldr	r6, [pc, #56]	; (800341c <sbrk_aligned+0x3c>)
 80033e4:	460c      	mov	r4, r1
 80033e6:	6831      	ldr	r1, [r6, #0]
 80033e8:	4605      	mov	r5, r0
 80033ea:	b911      	cbnz	r1, 80033f2 <sbrk_aligned+0x12>
 80033ec:	f000 f8cc 	bl	8003588 <_sbrk_r>
 80033f0:	6030      	str	r0, [r6, #0]
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 f8c7 	bl	8003588 <_sbrk_r>
 80033fa:	1c43      	adds	r3, r0, #1
 80033fc:	d00a      	beq.n	8003414 <sbrk_aligned+0x34>
 80033fe:	1cc4      	adds	r4, r0, #3
 8003400:	f024 0403 	bic.w	r4, r4, #3
 8003404:	42a0      	cmp	r0, r4
 8003406:	d007      	beq.n	8003418 <sbrk_aligned+0x38>
 8003408:	1a21      	subs	r1, r4, r0
 800340a:	4628      	mov	r0, r5
 800340c:	f000 f8bc 	bl	8003588 <_sbrk_r>
 8003410:	3001      	adds	r0, #1
 8003412:	d101      	bne.n	8003418 <sbrk_aligned+0x38>
 8003414:	f04f 34ff 	mov.w	r4, #4294967295
 8003418:	4620      	mov	r0, r4
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	20000120 	.word	0x20000120

08003420 <_malloc_r>:
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003424:	1ccd      	adds	r5, r1, #3
 8003426:	f025 0503 	bic.w	r5, r5, #3
 800342a:	3508      	adds	r5, #8
 800342c:	2d0c      	cmp	r5, #12
 800342e:	bf38      	it	cc
 8003430:	250c      	movcc	r5, #12
 8003432:	2d00      	cmp	r5, #0
 8003434:	4607      	mov	r7, r0
 8003436:	db01      	blt.n	800343c <_malloc_r+0x1c>
 8003438:	42a9      	cmp	r1, r5
 800343a:	d905      	bls.n	8003448 <_malloc_r+0x28>
 800343c:	230c      	movs	r3, #12
 800343e:	2600      	movs	r6, #0
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4630      	mov	r0, r6
 8003444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800351c <_malloc_r+0xfc>
 800344c:	f000 f868 	bl	8003520 <__malloc_lock>
 8003450:	f8d8 3000 	ldr.w	r3, [r8]
 8003454:	461c      	mov	r4, r3
 8003456:	bb5c      	cbnz	r4, 80034b0 <_malloc_r+0x90>
 8003458:	4629      	mov	r1, r5
 800345a:	4638      	mov	r0, r7
 800345c:	f7ff ffc0 	bl	80033e0 <sbrk_aligned>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	4604      	mov	r4, r0
 8003464:	d155      	bne.n	8003512 <_malloc_r+0xf2>
 8003466:	f8d8 4000 	ldr.w	r4, [r8]
 800346a:	4626      	mov	r6, r4
 800346c:	2e00      	cmp	r6, #0
 800346e:	d145      	bne.n	80034fc <_malloc_r+0xdc>
 8003470:	2c00      	cmp	r4, #0
 8003472:	d048      	beq.n	8003506 <_malloc_r+0xe6>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	4631      	mov	r1, r6
 8003478:	4638      	mov	r0, r7
 800347a:	eb04 0903 	add.w	r9, r4, r3
 800347e:	f000 f883 	bl	8003588 <_sbrk_r>
 8003482:	4581      	cmp	r9, r0
 8003484:	d13f      	bne.n	8003506 <_malloc_r+0xe6>
 8003486:	6821      	ldr	r1, [r4, #0]
 8003488:	4638      	mov	r0, r7
 800348a:	1a6d      	subs	r5, r5, r1
 800348c:	4629      	mov	r1, r5
 800348e:	f7ff ffa7 	bl	80033e0 <sbrk_aligned>
 8003492:	3001      	adds	r0, #1
 8003494:	d037      	beq.n	8003506 <_malloc_r+0xe6>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	442b      	add	r3, r5
 800349a:	6023      	str	r3, [r4, #0]
 800349c:	f8d8 3000 	ldr.w	r3, [r8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d038      	beq.n	8003516 <_malloc_r+0xf6>
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	42a2      	cmp	r2, r4
 80034a8:	d12b      	bne.n	8003502 <_malloc_r+0xe2>
 80034aa:	2200      	movs	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	e00f      	b.n	80034d0 <_malloc_r+0xb0>
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	1b52      	subs	r2, r2, r5
 80034b4:	d41f      	bmi.n	80034f6 <_malloc_r+0xd6>
 80034b6:	2a0b      	cmp	r2, #11
 80034b8:	d917      	bls.n	80034ea <_malloc_r+0xca>
 80034ba:	1961      	adds	r1, r4, r5
 80034bc:	42a3      	cmp	r3, r4
 80034be:	6025      	str	r5, [r4, #0]
 80034c0:	bf18      	it	ne
 80034c2:	6059      	strne	r1, [r3, #4]
 80034c4:	6863      	ldr	r3, [r4, #4]
 80034c6:	bf08      	it	eq
 80034c8:	f8c8 1000 	streq.w	r1, [r8]
 80034cc:	5162      	str	r2, [r4, r5]
 80034ce:	604b      	str	r3, [r1, #4]
 80034d0:	4638      	mov	r0, r7
 80034d2:	f104 060b 	add.w	r6, r4, #11
 80034d6:	f000 f829 	bl	800352c <__malloc_unlock>
 80034da:	f026 0607 	bic.w	r6, r6, #7
 80034de:	1d23      	adds	r3, r4, #4
 80034e0:	1af2      	subs	r2, r6, r3
 80034e2:	d0ae      	beq.n	8003442 <_malloc_r+0x22>
 80034e4:	1b9b      	subs	r3, r3, r6
 80034e6:	50a3      	str	r3, [r4, r2]
 80034e8:	e7ab      	b.n	8003442 <_malloc_r+0x22>
 80034ea:	42a3      	cmp	r3, r4
 80034ec:	6862      	ldr	r2, [r4, #4]
 80034ee:	d1dd      	bne.n	80034ac <_malloc_r+0x8c>
 80034f0:	f8c8 2000 	str.w	r2, [r8]
 80034f4:	e7ec      	b.n	80034d0 <_malloc_r+0xb0>
 80034f6:	4623      	mov	r3, r4
 80034f8:	6864      	ldr	r4, [r4, #4]
 80034fa:	e7ac      	b.n	8003456 <_malloc_r+0x36>
 80034fc:	4634      	mov	r4, r6
 80034fe:	6876      	ldr	r6, [r6, #4]
 8003500:	e7b4      	b.n	800346c <_malloc_r+0x4c>
 8003502:	4613      	mov	r3, r2
 8003504:	e7cc      	b.n	80034a0 <_malloc_r+0x80>
 8003506:	230c      	movs	r3, #12
 8003508:	4638      	mov	r0, r7
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	f000 f80e 	bl	800352c <__malloc_unlock>
 8003510:	e797      	b.n	8003442 <_malloc_r+0x22>
 8003512:	6025      	str	r5, [r4, #0]
 8003514:	e7dc      	b.n	80034d0 <_malloc_r+0xb0>
 8003516:	605b      	str	r3, [r3, #4]
 8003518:	deff      	udf	#255	; 0xff
 800351a:	bf00      	nop
 800351c:	2000011c 	.word	0x2000011c

08003520 <__malloc_lock>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__malloc_lock+0x8>)
 8003522:	f000 b86b 	b.w	80035fc <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	20000260 	.word	0x20000260

0800352c <__malloc_unlock>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__malloc_unlock+0x8>)
 800352e:	f000 b866 	b.w	80035fe <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	20000260 	.word	0x20000260

08003538 <siprintf>:
 8003538:	b40e      	push	{r1, r2, r3}
 800353a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800353e:	b500      	push	{lr}
 8003540:	b09c      	sub	sp, #112	; 0x70
 8003542:	ab1d      	add	r3, sp, #116	; 0x74
 8003544:	9002      	str	r0, [sp, #8]
 8003546:	9006      	str	r0, [sp, #24]
 8003548:	9107      	str	r1, [sp, #28]
 800354a:	9104      	str	r1, [sp, #16]
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <siprintf+0x38>)
 800354e:	4909      	ldr	r1, [pc, #36]	; (8003574 <siprintf+0x3c>)
 8003550:	f853 2b04 	ldr.w	r2, [r3], #4
 8003554:	9105      	str	r1, [sp, #20]
 8003556:	6800      	ldr	r0, [r0, #0]
 8003558:	a902      	add	r1, sp, #8
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	f000 f8f2 	bl	8003744 <_svfiprintf_r>
 8003560:	2200      	movs	r2, #0
 8003562:	9b02      	ldr	r3, [sp, #8]
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	b01c      	add	sp, #112	; 0x70
 8003568:	f85d eb04 	ldr.w	lr, [sp], #4
 800356c:	b003      	add	sp, #12
 800356e:	4770      	bx	lr
 8003570:	20000060 	.word	0x20000060
 8003574:	ffff0208 	.word	0xffff0208

08003578 <memset>:
 8003578:	4603      	mov	r3, r0
 800357a:	4402      	add	r2, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <_sbrk_r>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	2300      	movs	r3, #0
 800358c:	4d05      	ldr	r5, [pc, #20]	; (80035a4 <_sbrk_r+0x1c>)
 800358e:	4604      	mov	r4, r0
 8003590:	4608      	mov	r0, r1
 8003592:	602b      	str	r3, [r5, #0]
 8003594:	f7fd fdec 	bl	8001170 <_sbrk>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d102      	bne.n	80035a2 <_sbrk_r+0x1a>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	b103      	cbz	r3, 80035a2 <_sbrk_r+0x1a>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	2000025c 	.word	0x2000025c

080035a8 <__errno>:
 80035a8:	4b01      	ldr	r3, [pc, #4]	; (80035b0 <__errno+0x8>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000060 	.word	0x20000060

080035b4 <__libc_init_array>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	2600      	movs	r6, #0
 80035b8:	4d0c      	ldr	r5, [pc, #48]	; (80035ec <__libc_init_array+0x38>)
 80035ba:	4c0d      	ldr	r4, [pc, #52]	; (80035f0 <__libc_init_array+0x3c>)
 80035bc:	1b64      	subs	r4, r4, r5
 80035be:	10a4      	asrs	r4, r4, #2
 80035c0:	42a6      	cmp	r6, r4
 80035c2:	d109      	bne.n	80035d8 <__libc_init_array+0x24>
 80035c4:	f000 fbbe 	bl	8003d44 <_init>
 80035c8:	2600      	movs	r6, #0
 80035ca:	4d0a      	ldr	r5, [pc, #40]	; (80035f4 <__libc_init_array+0x40>)
 80035cc:	4c0a      	ldr	r4, [pc, #40]	; (80035f8 <__libc_init_array+0x44>)
 80035ce:	1b64      	subs	r4, r4, r5
 80035d0:	10a4      	asrs	r4, r4, #2
 80035d2:	42a6      	cmp	r6, r4
 80035d4:	d105      	bne.n	80035e2 <__libc_init_array+0x2e>
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035dc:	4798      	blx	r3
 80035de:	3601      	adds	r6, #1
 80035e0:	e7ee      	b.n	80035c0 <__libc_init_array+0xc>
 80035e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e6:	4798      	blx	r3
 80035e8:	3601      	adds	r6, #1
 80035ea:	e7f2      	b.n	80035d2 <__libc_init_array+0x1e>
 80035ec:	08004bcc 	.word	0x08004bcc
 80035f0:	08004bcc 	.word	0x08004bcc
 80035f4:	08004bcc 	.word	0x08004bcc
 80035f8:	08004bd0 	.word	0x08004bd0

080035fc <__retarget_lock_acquire_recursive>:
 80035fc:	4770      	bx	lr

080035fe <__retarget_lock_release_recursive>:
 80035fe:	4770      	bx	lr

08003600 <_free_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4605      	mov	r5, r0
 8003604:	2900      	cmp	r1, #0
 8003606:	d040      	beq.n	800368a <_free_r+0x8a>
 8003608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800360c:	1f0c      	subs	r4, r1, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfb8      	it	lt
 8003612:	18e4      	addlt	r4, r4, r3
 8003614:	f7ff ff84 	bl	8003520 <__malloc_lock>
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <_free_r+0x8c>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	b933      	cbnz	r3, 800362c <_free_r+0x2c>
 800361e:	6063      	str	r3, [r4, #4]
 8003620:	6014      	str	r4, [r2, #0]
 8003622:	4628      	mov	r0, r5
 8003624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003628:	f7ff bf80 	b.w	800352c <__malloc_unlock>
 800362c:	42a3      	cmp	r3, r4
 800362e:	d908      	bls.n	8003642 <_free_r+0x42>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	1821      	adds	r1, r4, r0
 8003634:	428b      	cmp	r3, r1
 8003636:	bf01      	itttt	eq
 8003638:	6819      	ldreq	r1, [r3, #0]
 800363a:	685b      	ldreq	r3, [r3, #4]
 800363c:	1809      	addeq	r1, r1, r0
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	e7ed      	b.n	800361e <_free_r+0x1e>
 8003642:	461a      	mov	r2, r3
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b10b      	cbz	r3, 800364c <_free_r+0x4c>
 8003648:	42a3      	cmp	r3, r4
 800364a:	d9fa      	bls.n	8003642 <_free_r+0x42>
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	1850      	adds	r0, r2, r1
 8003650:	42a0      	cmp	r0, r4
 8003652:	d10b      	bne.n	800366c <_free_r+0x6c>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	4401      	add	r1, r0
 8003658:	1850      	adds	r0, r2, r1
 800365a:	4283      	cmp	r3, r0
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	d1e0      	bne.n	8003622 <_free_r+0x22>
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4408      	add	r0, r1
 8003666:	6010      	str	r0, [r2, #0]
 8003668:	6053      	str	r3, [r2, #4]
 800366a:	e7da      	b.n	8003622 <_free_r+0x22>
 800366c:	d902      	bls.n	8003674 <_free_r+0x74>
 800366e:	230c      	movs	r3, #12
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	e7d6      	b.n	8003622 <_free_r+0x22>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	1821      	adds	r1, r4, r0
 8003678:	428b      	cmp	r3, r1
 800367a:	bf01      	itttt	eq
 800367c:	6819      	ldreq	r1, [r3, #0]
 800367e:	685b      	ldreq	r3, [r3, #4]
 8003680:	1809      	addeq	r1, r1, r0
 8003682:	6021      	streq	r1, [r4, #0]
 8003684:	6063      	str	r3, [r4, #4]
 8003686:	6054      	str	r4, [r2, #4]
 8003688:	e7cb      	b.n	8003622 <_free_r+0x22>
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	2000011c 	.word	0x2000011c

08003690 <__ssputs_r>:
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	461f      	mov	r7, r3
 8003696:	688e      	ldr	r6, [r1, #8]
 8003698:	4682      	mov	sl, r0
 800369a:	42be      	cmp	r6, r7
 800369c:	460c      	mov	r4, r1
 800369e:	4690      	mov	r8, r2
 80036a0:	680b      	ldr	r3, [r1, #0]
 80036a2:	d82c      	bhi.n	80036fe <__ssputs_r+0x6e>
 80036a4:	898a      	ldrh	r2, [r1, #12]
 80036a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036aa:	d026      	beq.n	80036fa <__ssputs_r+0x6a>
 80036ac:	6965      	ldr	r5, [r4, #20]
 80036ae:	6909      	ldr	r1, [r1, #16]
 80036b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036b4:	eba3 0901 	sub.w	r9, r3, r1
 80036b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036bc:	1c7b      	adds	r3, r7, #1
 80036be:	444b      	add	r3, r9
 80036c0:	106d      	asrs	r5, r5, #1
 80036c2:	429d      	cmp	r5, r3
 80036c4:	bf38      	it	cc
 80036c6:	461d      	movcc	r5, r3
 80036c8:	0553      	lsls	r3, r2, #21
 80036ca:	d527      	bpl.n	800371c <__ssputs_r+0x8c>
 80036cc:	4629      	mov	r1, r5
 80036ce:	f7ff fea7 	bl	8003420 <_malloc_r>
 80036d2:	4606      	mov	r6, r0
 80036d4:	b360      	cbz	r0, 8003730 <__ssputs_r+0xa0>
 80036d6:	464a      	mov	r2, r9
 80036d8:	6921      	ldr	r1, [r4, #16]
 80036da:	f000 faed 	bl	8003cb8 <memcpy>
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	6126      	str	r6, [r4, #16]
 80036ec:	444e      	add	r6, r9
 80036ee:	6026      	str	r6, [r4, #0]
 80036f0:	463e      	mov	r6, r7
 80036f2:	6165      	str	r5, [r4, #20]
 80036f4:	eba5 0509 	sub.w	r5, r5, r9
 80036f8:	60a5      	str	r5, [r4, #8]
 80036fa:	42be      	cmp	r6, r7
 80036fc:	d900      	bls.n	8003700 <__ssputs_r+0x70>
 80036fe:	463e      	mov	r6, r7
 8003700:	4632      	mov	r2, r6
 8003702:	4641      	mov	r1, r8
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	f000 faaf 	bl	8003c68 <memmove>
 800370a:	2000      	movs	r0, #0
 800370c:	68a3      	ldr	r3, [r4, #8]
 800370e:	1b9b      	subs	r3, r3, r6
 8003710:	60a3      	str	r3, [r4, #8]
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	4433      	add	r3, r6
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800371c:	462a      	mov	r2, r5
 800371e:	f000 fad9 	bl	8003cd4 <_realloc_r>
 8003722:	4606      	mov	r6, r0
 8003724:	2800      	cmp	r0, #0
 8003726:	d1e0      	bne.n	80036ea <__ssputs_r+0x5a>
 8003728:	4650      	mov	r0, sl
 800372a:	6921      	ldr	r1, [r4, #16]
 800372c:	f7ff ff68 	bl	8003600 <_free_r>
 8003730:	230c      	movs	r3, #12
 8003732:	f8ca 3000 	str.w	r3, [sl]
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	e7e9      	b.n	8003718 <__ssputs_r+0x88>

08003744 <_svfiprintf_r>:
 8003744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003748:	4698      	mov	r8, r3
 800374a:	898b      	ldrh	r3, [r1, #12]
 800374c:	4607      	mov	r7, r0
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	460d      	mov	r5, r1
 8003752:	4614      	mov	r4, r2
 8003754:	b09d      	sub	sp, #116	; 0x74
 8003756:	d50e      	bpl.n	8003776 <_svfiprintf_r+0x32>
 8003758:	690b      	ldr	r3, [r1, #16]
 800375a:	b963      	cbnz	r3, 8003776 <_svfiprintf_r+0x32>
 800375c:	2140      	movs	r1, #64	; 0x40
 800375e:	f7ff fe5f 	bl	8003420 <_malloc_r>
 8003762:	6028      	str	r0, [r5, #0]
 8003764:	6128      	str	r0, [r5, #16]
 8003766:	b920      	cbnz	r0, 8003772 <_svfiprintf_r+0x2e>
 8003768:	230c      	movs	r3, #12
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	f04f 30ff 	mov.w	r0, #4294967295
 8003770:	e0d0      	b.n	8003914 <_svfiprintf_r+0x1d0>
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	616b      	str	r3, [r5, #20]
 8003776:	2300      	movs	r3, #0
 8003778:	9309      	str	r3, [sp, #36]	; 0x24
 800377a:	2320      	movs	r3, #32
 800377c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003780:	2330      	movs	r3, #48	; 0x30
 8003782:	f04f 0901 	mov.w	r9, #1
 8003786:	f8cd 800c 	str.w	r8, [sp, #12]
 800378a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800392c <_svfiprintf_r+0x1e8>
 800378e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003792:	4623      	mov	r3, r4
 8003794:	469a      	mov	sl, r3
 8003796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800379a:	b10a      	cbz	r2, 80037a0 <_svfiprintf_r+0x5c>
 800379c:	2a25      	cmp	r2, #37	; 0x25
 800379e:	d1f9      	bne.n	8003794 <_svfiprintf_r+0x50>
 80037a0:	ebba 0b04 	subs.w	fp, sl, r4
 80037a4:	d00b      	beq.n	80037be <_svfiprintf_r+0x7a>
 80037a6:	465b      	mov	r3, fp
 80037a8:	4622      	mov	r2, r4
 80037aa:	4629      	mov	r1, r5
 80037ac:	4638      	mov	r0, r7
 80037ae:	f7ff ff6f 	bl	8003690 <__ssputs_r>
 80037b2:	3001      	adds	r0, #1
 80037b4:	f000 80a9 	beq.w	800390a <_svfiprintf_r+0x1c6>
 80037b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ba:	445a      	add	r2, fp
 80037bc:	9209      	str	r2, [sp, #36]	; 0x24
 80037be:	f89a 3000 	ldrb.w	r3, [sl]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80a1 	beq.w	800390a <_svfiprintf_r+0x1c6>
 80037c8:	2300      	movs	r3, #0
 80037ca:	f04f 32ff 	mov.w	r2, #4294967295
 80037ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037d2:	f10a 0a01 	add.w	sl, sl, #1
 80037d6:	9304      	str	r3, [sp, #16]
 80037d8:	9307      	str	r3, [sp, #28]
 80037da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037de:	931a      	str	r3, [sp, #104]	; 0x68
 80037e0:	4654      	mov	r4, sl
 80037e2:	2205      	movs	r2, #5
 80037e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e8:	4850      	ldr	r0, [pc, #320]	; (800392c <_svfiprintf_r+0x1e8>)
 80037ea:	f000 fa57 	bl	8003c9c <memchr>
 80037ee:	9a04      	ldr	r2, [sp, #16]
 80037f0:	b9d8      	cbnz	r0, 800382a <_svfiprintf_r+0xe6>
 80037f2:	06d0      	lsls	r0, r2, #27
 80037f4:	bf44      	itt	mi
 80037f6:	2320      	movmi	r3, #32
 80037f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037fc:	0711      	lsls	r1, r2, #28
 80037fe:	bf44      	itt	mi
 8003800:	232b      	movmi	r3, #43	; 0x2b
 8003802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003806:	f89a 3000 	ldrb.w	r3, [sl]
 800380a:	2b2a      	cmp	r3, #42	; 0x2a
 800380c:	d015      	beq.n	800383a <_svfiprintf_r+0xf6>
 800380e:	4654      	mov	r4, sl
 8003810:	2000      	movs	r0, #0
 8003812:	f04f 0c0a 	mov.w	ip, #10
 8003816:	9a07      	ldr	r2, [sp, #28]
 8003818:	4621      	mov	r1, r4
 800381a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800381e:	3b30      	subs	r3, #48	; 0x30
 8003820:	2b09      	cmp	r3, #9
 8003822:	d94d      	bls.n	80038c0 <_svfiprintf_r+0x17c>
 8003824:	b1b0      	cbz	r0, 8003854 <_svfiprintf_r+0x110>
 8003826:	9207      	str	r2, [sp, #28]
 8003828:	e014      	b.n	8003854 <_svfiprintf_r+0x110>
 800382a:	eba0 0308 	sub.w	r3, r0, r8
 800382e:	fa09 f303 	lsl.w	r3, r9, r3
 8003832:	4313      	orrs	r3, r2
 8003834:	46a2      	mov	sl, r4
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	e7d2      	b.n	80037e0 <_svfiprintf_r+0x9c>
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	1d19      	adds	r1, r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	9103      	str	r1, [sp, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfbb      	ittet	lt
 8003846:	425b      	neglt	r3, r3
 8003848:	f042 0202 	orrlt.w	r2, r2, #2
 800384c:	9307      	strge	r3, [sp, #28]
 800384e:	9307      	strlt	r3, [sp, #28]
 8003850:	bfb8      	it	lt
 8003852:	9204      	strlt	r2, [sp, #16]
 8003854:	7823      	ldrb	r3, [r4, #0]
 8003856:	2b2e      	cmp	r3, #46	; 0x2e
 8003858:	d10c      	bne.n	8003874 <_svfiprintf_r+0x130>
 800385a:	7863      	ldrb	r3, [r4, #1]
 800385c:	2b2a      	cmp	r3, #42	; 0x2a
 800385e:	d134      	bne.n	80038ca <_svfiprintf_r+0x186>
 8003860:	9b03      	ldr	r3, [sp, #12]
 8003862:	3402      	adds	r4, #2
 8003864:	1d1a      	adds	r2, r3, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	9203      	str	r2, [sp, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	bfb8      	it	lt
 800386e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003930 <_svfiprintf_r+0x1ec>
 8003878:	2203      	movs	r2, #3
 800387a:	4650      	mov	r0, sl
 800387c:	7821      	ldrb	r1, [r4, #0]
 800387e:	f000 fa0d 	bl	8003c9c <memchr>
 8003882:	b138      	cbz	r0, 8003894 <_svfiprintf_r+0x150>
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	9b04      	ldr	r3, [sp, #16]
 8003888:	eba0 000a 	sub.w	r0, r0, sl
 800388c:	4082      	lsls	r2, r0
 800388e:	4313      	orrs	r3, r2
 8003890:	3401      	adds	r4, #1
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003898:	2206      	movs	r2, #6
 800389a:	4826      	ldr	r0, [pc, #152]	; (8003934 <_svfiprintf_r+0x1f0>)
 800389c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038a0:	f000 f9fc 	bl	8003c9c <memchr>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d038      	beq.n	800391a <_svfiprintf_r+0x1d6>
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <_svfiprintf_r+0x1f4>)
 80038aa:	bb1b      	cbnz	r3, 80038f4 <_svfiprintf_r+0x1b0>
 80038ac:	9b03      	ldr	r3, [sp, #12]
 80038ae:	3307      	adds	r3, #7
 80038b0:	f023 0307 	bic.w	r3, r3, #7
 80038b4:	3308      	adds	r3, #8
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ba:	4433      	add	r3, r6
 80038bc:	9309      	str	r3, [sp, #36]	; 0x24
 80038be:	e768      	b.n	8003792 <_svfiprintf_r+0x4e>
 80038c0:	460c      	mov	r4, r1
 80038c2:	2001      	movs	r0, #1
 80038c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038c8:	e7a6      	b.n	8003818 <_svfiprintf_r+0xd4>
 80038ca:	2300      	movs	r3, #0
 80038cc:	f04f 0c0a 	mov.w	ip, #10
 80038d0:	4619      	mov	r1, r3
 80038d2:	3401      	adds	r4, #1
 80038d4:	9305      	str	r3, [sp, #20]
 80038d6:	4620      	mov	r0, r4
 80038d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038dc:	3a30      	subs	r2, #48	; 0x30
 80038de:	2a09      	cmp	r2, #9
 80038e0:	d903      	bls.n	80038ea <_svfiprintf_r+0x1a6>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0c6      	beq.n	8003874 <_svfiprintf_r+0x130>
 80038e6:	9105      	str	r1, [sp, #20]
 80038e8:	e7c4      	b.n	8003874 <_svfiprintf_r+0x130>
 80038ea:	4604      	mov	r4, r0
 80038ec:	2301      	movs	r3, #1
 80038ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f2:	e7f0      	b.n	80038d6 <_svfiprintf_r+0x192>
 80038f4:	ab03      	add	r3, sp, #12
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	462a      	mov	r2, r5
 80038fa:	4638      	mov	r0, r7
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <_svfiprintf_r+0x1f8>)
 80038fe:	a904      	add	r1, sp, #16
 8003900:	f3af 8000 	nop.w
 8003904:	1c42      	adds	r2, r0, #1
 8003906:	4606      	mov	r6, r0
 8003908:	d1d6      	bne.n	80038b8 <_svfiprintf_r+0x174>
 800390a:	89ab      	ldrh	r3, [r5, #12]
 800390c:	065b      	lsls	r3, r3, #25
 800390e:	f53f af2d 	bmi.w	800376c <_svfiprintf_r+0x28>
 8003912:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003914:	b01d      	add	sp, #116	; 0x74
 8003916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800391a:	ab03      	add	r3, sp, #12
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	462a      	mov	r2, r5
 8003920:	4638      	mov	r0, r7
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <_svfiprintf_r+0x1f8>)
 8003924:	a904      	add	r1, sp, #16
 8003926:	f000 f87d 	bl	8003a24 <_printf_i>
 800392a:	e7eb      	b.n	8003904 <_svfiprintf_r+0x1c0>
 800392c:	08004b96 	.word	0x08004b96
 8003930:	08004b9c 	.word	0x08004b9c
 8003934:	08004ba0 	.word	0x08004ba0
 8003938:	00000000 	.word	0x00000000
 800393c:	08003691 	.word	0x08003691

08003940 <_printf_common>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	4616      	mov	r6, r2
 8003946:	4699      	mov	r9, r3
 8003948:	688a      	ldr	r2, [r1, #8]
 800394a:	690b      	ldr	r3, [r1, #16]
 800394c:	4607      	mov	r7, r0
 800394e:	4293      	cmp	r3, r2
 8003950:	bfb8      	it	lt
 8003952:	4613      	movlt	r3, r2
 8003954:	6033      	str	r3, [r6, #0]
 8003956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800395a:	460c      	mov	r4, r1
 800395c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003960:	b10a      	cbz	r2, 8003966 <_printf_common+0x26>
 8003962:	3301      	adds	r3, #1
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	0699      	lsls	r1, r3, #26
 800396a:	bf42      	ittt	mi
 800396c:	6833      	ldrmi	r3, [r6, #0]
 800396e:	3302      	addmi	r3, #2
 8003970:	6033      	strmi	r3, [r6, #0]
 8003972:	6825      	ldr	r5, [r4, #0]
 8003974:	f015 0506 	ands.w	r5, r5, #6
 8003978:	d106      	bne.n	8003988 <_printf_common+0x48>
 800397a:	f104 0a19 	add.w	sl, r4, #25
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	6832      	ldr	r2, [r6, #0]
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	42ab      	cmp	r3, r5
 8003986:	dc2b      	bgt.n	80039e0 <_printf_common+0xa0>
 8003988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800398c:	1e13      	subs	r3, r2, #0
 800398e:	6822      	ldr	r2, [r4, #0]
 8003990:	bf18      	it	ne
 8003992:	2301      	movne	r3, #1
 8003994:	0692      	lsls	r2, r2, #26
 8003996:	d430      	bmi.n	80039fa <_printf_common+0xba>
 8003998:	4649      	mov	r1, r9
 800399a:	4638      	mov	r0, r7
 800399c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039a0:	47c0      	blx	r8
 80039a2:	3001      	adds	r0, #1
 80039a4:	d023      	beq.n	80039ee <_printf_common+0xae>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	6922      	ldr	r2, [r4, #16]
 80039aa:	f003 0306 	and.w	r3, r3, #6
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	bf14      	ite	ne
 80039b2:	2500      	movne	r5, #0
 80039b4:	6833      	ldreq	r3, [r6, #0]
 80039b6:	f04f 0600 	mov.w	r6, #0
 80039ba:	bf08      	it	eq
 80039bc:	68e5      	ldreq	r5, [r4, #12]
 80039be:	f104 041a 	add.w	r4, r4, #26
 80039c2:	bf08      	it	eq
 80039c4:	1aed      	subeq	r5, r5, r3
 80039c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039ca:	bf08      	it	eq
 80039cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d0:	4293      	cmp	r3, r2
 80039d2:	bfc4      	itt	gt
 80039d4:	1a9b      	subgt	r3, r3, r2
 80039d6:	18ed      	addgt	r5, r5, r3
 80039d8:	42b5      	cmp	r5, r6
 80039da:	d11a      	bne.n	8003a12 <_printf_common+0xd2>
 80039dc:	2000      	movs	r0, #0
 80039de:	e008      	b.n	80039f2 <_printf_common+0xb2>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4652      	mov	r2, sl
 80039e4:	4649      	mov	r1, r9
 80039e6:	4638      	mov	r0, r7
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d103      	bne.n	80039f6 <_printf_common+0xb6>
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295
 80039f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f6:	3501      	adds	r5, #1
 80039f8:	e7c1      	b.n	800397e <_printf_common+0x3e>
 80039fa:	2030      	movs	r0, #48	; 0x30
 80039fc:	18e1      	adds	r1, r4, r3
 80039fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a08:	4422      	add	r2, r4
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a10:	e7c2      	b.n	8003998 <_printf_common+0x58>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4622      	mov	r2, r4
 8003a16:	4649      	mov	r1, r9
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d0e6      	beq.n	80039ee <_printf_common+0xae>
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7d9      	b.n	80039d8 <_printf_common+0x98>

08003a24 <_printf_i>:
 8003a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	7e0f      	ldrb	r7, [r1, #24]
 8003a2a:	4691      	mov	r9, r2
 8003a2c:	2f78      	cmp	r7, #120	; 0x78
 8003a2e:	4680      	mov	r8, r0
 8003a30:	460c      	mov	r4, r1
 8003a32:	469a      	mov	sl, r3
 8003a34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a3a:	d807      	bhi.n	8003a4c <_printf_i+0x28>
 8003a3c:	2f62      	cmp	r7, #98	; 0x62
 8003a3e:	d80a      	bhi.n	8003a56 <_printf_i+0x32>
 8003a40:	2f00      	cmp	r7, #0
 8003a42:	f000 80d5 	beq.w	8003bf0 <_printf_i+0x1cc>
 8003a46:	2f58      	cmp	r7, #88	; 0x58
 8003a48:	f000 80c1 	beq.w	8003bce <_printf_i+0x1aa>
 8003a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a54:	e03a      	b.n	8003acc <_printf_i+0xa8>
 8003a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a5a:	2b15      	cmp	r3, #21
 8003a5c:	d8f6      	bhi.n	8003a4c <_printf_i+0x28>
 8003a5e:	a101      	add	r1, pc, #4	; (adr r1, 8003a64 <_printf_i+0x40>)
 8003a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a64:	08003abd 	.word	0x08003abd
 8003a68:	08003ad1 	.word	0x08003ad1
 8003a6c:	08003a4d 	.word	0x08003a4d
 8003a70:	08003a4d 	.word	0x08003a4d
 8003a74:	08003a4d 	.word	0x08003a4d
 8003a78:	08003a4d 	.word	0x08003a4d
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003a4d 	.word	0x08003a4d
 8003a84:	08003a4d 	.word	0x08003a4d
 8003a88:	08003a4d 	.word	0x08003a4d
 8003a8c:	08003a4d 	.word	0x08003a4d
 8003a90:	08003bd7 	.word	0x08003bd7
 8003a94:	08003afd 	.word	0x08003afd
 8003a98:	08003b91 	.word	0x08003b91
 8003a9c:	08003a4d 	.word	0x08003a4d
 8003aa0:	08003a4d 	.word	0x08003a4d
 8003aa4:	08003bf9 	.word	0x08003bf9
 8003aa8:	08003a4d 	.word	0x08003a4d
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003a4d 	.word	0x08003a4d
 8003ab4:	08003a4d 	.word	0x08003a4d
 8003ab8:	08003b99 	.word	0x08003b99
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	1d1a      	adds	r2, r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	602a      	str	r2, [r5, #0]
 8003ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0a0      	b.n	8003c12 <_printf_i+0x1ee>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	0607      	lsls	r7, r0, #24
 8003ad6:	f103 0104 	add.w	r1, r3, #4
 8003ada:	6029      	str	r1, [r5, #0]
 8003adc:	d501      	bpl.n	8003ae2 <_printf_i+0xbe>
 8003ade:	681e      	ldr	r6, [r3, #0]
 8003ae0:	e003      	b.n	8003aea <_printf_i+0xc6>
 8003ae2:	0646      	lsls	r6, r0, #25
 8003ae4:	d5fb      	bpl.n	8003ade <_printf_i+0xba>
 8003ae6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003aea:	2e00      	cmp	r6, #0
 8003aec:	da03      	bge.n	8003af6 <_printf_i+0xd2>
 8003aee:	232d      	movs	r3, #45	; 0x2d
 8003af0:	4276      	negs	r6, r6
 8003af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af6:	230a      	movs	r3, #10
 8003af8:	4859      	ldr	r0, [pc, #356]	; (8003c60 <_printf_i+0x23c>)
 8003afa:	e012      	b.n	8003b22 <_printf_i+0xfe>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	1d19      	adds	r1, r3, #4
 8003b02:	6029      	str	r1, [r5, #0]
 8003b04:	0605      	lsls	r5, r0, #24
 8003b06:	d501      	bpl.n	8003b0c <_printf_i+0xe8>
 8003b08:	681e      	ldr	r6, [r3, #0]
 8003b0a:	e002      	b.n	8003b12 <_printf_i+0xee>
 8003b0c:	0641      	lsls	r1, r0, #25
 8003b0e:	d5fb      	bpl.n	8003b08 <_printf_i+0xe4>
 8003b10:	881e      	ldrh	r6, [r3, #0]
 8003b12:	2f6f      	cmp	r7, #111	; 0x6f
 8003b14:	bf0c      	ite	eq
 8003b16:	2308      	moveq	r3, #8
 8003b18:	230a      	movne	r3, #10
 8003b1a:	4851      	ldr	r0, [pc, #324]	; (8003c60 <_printf_i+0x23c>)
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b22:	6865      	ldr	r5, [r4, #4]
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	bfa8      	it	ge
 8003b28:	6821      	ldrge	r1, [r4, #0]
 8003b2a:	60a5      	str	r5, [r4, #8]
 8003b2c:	bfa4      	itt	ge
 8003b2e:	f021 0104 	bicge.w	r1, r1, #4
 8003b32:	6021      	strge	r1, [r4, #0]
 8003b34:	b90e      	cbnz	r6, 8003b3a <_printf_i+0x116>
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	d04b      	beq.n	8003bd2 <_printf_i+0x1ae>
 8003b3a:	4615      	mov	r5, r2
 8003b3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b40:	fb03 6711 	mls	r7, r3, r1, r6
 8003b44:	5dc7      	ldrb	r7, [r0, r7]
 8003b46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b4a:	4637      	mov	r7, r6
 8003b4c:	42bb      	cmp	r3, r7
 8003b4e:	460e      	mov	r6, r1
 8003b50:	d9f4      	bls.n	8003b3c <_printf_i+0x118>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d10b      	bne.n	8003b6e <_printf_i+0x14a>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	07de      	lsls	r6, r3, #31
 8003b5a:	d508      	bpl.n	8003b6e <_printf_i+0x14a>
 8003b5c:	6923      	ldr	r3, [r4, #16]
 8003b5e:	6861      	ldr	r1, [r4, #4]
 8003b60:	4299      	cmp	r1, r3
 8003b62:	bfde      	ittt	le
 8003b64:	2330      	movle	r3, #48	; 0x30
 8003b66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b6e:	1b52      	subs	r2, r2, r5
 8003b70:	6122      	str	r2, [r4, #16]
 8003b72:	464b      	mov	r3, r9
 8003b74:	4621      	mov	r1, r4
 8003b76:	4640      	mov	r0, r8
 8003b78:	f8cd a000 	str.w	sl, [sp]
 8003b7c:	aa03      	add	r2, sp, #12
 8003b7e:	f7ff fedf 	bl	8003940 <_printf_common>
 8003b82:	3001      	adds	r0, #1
 8003b84:	d14a      	bne.n	8003c1c <_printf_i+0x1f8>
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	b004      	add	sp, #16
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	f043 0320 	orr.w	r3, r3, #32
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	2778      	movs	r7, #120	; 0x78
 8003b9a:	4832      	ldr	r0, [pc, #200]	; (8003c64 <_printf_i+0x240>)
 8003b9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	6829      	ldr	r1, [r5, #0]
 8003ba4:	061f      	lsls	r7, r3, #24
 8003ba6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003baa:	d402      	bmi.n	8003bb2 <_printf_i+0x18e>
 8003bac:	065f      	lsls	r7, r3, #25
 8003bae:	bf48      	it	mi
 8003bb0:	b2b6      	uxthmi	r6, r6
 8003bb2:	07df      	lsls	r7, r3, #31
 8003bb4:	bf48      	it	mi
 8003bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8003bba:	6029      	str	r1, [r5, #0]
 8003bbc:	bf48      	it	mi
 8003bbe:	6023      	strmi	r3, [r4, #0]
 8003bc0:	b91e      	cbnz	r6, 8003bca <_printf_i+0x1a6>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	f023 0320 	bic.w	r3, r3, #32
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	2310      	movs	r3, #16
 8003bcc:	e7a6      	b.n	8003b1c <_printf_i+0xf8>
 8003bce:	4824      	ldr	r0, [pc, #144]	; (8003c60 <_printf_i+0x23c>)
 8003bd0:	e7e4      	b.n	8003b9c <_printf_i+0x178>
 8003bd2:	4615      	mov	r5, r2
 8003bd4:	e7bd      	b.n	8003b52 <_printf_i+0x12e>
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	6826      	ldr	r6, [r4, #0]
 8003bda:	1d18      	adds	r0, r3, #4
 8003bdc:	6961      	ldr	r1, [r4, #20]
 8003bde:	6028      	str	r0, [r5, #0]
 8003be0:	0635      	lsls	r5, r6, #24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	d501      	bpl.n	8003bea <_printf_i+0x1c6>
 8003be6:	6019      	str	r1, [r3, #0]
 8003be8:	e002      	b.n	8003bf0 <_printf_i+0x1cc>
 8003bea:	0670      	lsls	r0, r6, #25
 8003bec:	d5fb      	bpl.n	8003be6 <_printf_i+0x1c2>
 8003bee:	8019      	strh	r1, [r3, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4615      	mov	r5, r2
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	e7bc      	b.n	8003b72 <_printf_i+0x14e>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	602a      	str	r2, [r5, #0]
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	6862      	ldr	r2, [r4, #4]
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 f849 	bl	8003c9c <memchr>
 8003c0a:	b108      	cbz	r0, 8003c10 <_printf_i+0x1ec>
 8003c0c:	1b40      	subs	r0, r0, r5
 8003c0e:	6060      	str	r0, [r4, #4]
 8003c10:	6863      	ldr	r3, [r4, #4]
 8003c12:	6123      	str	r3, [r4, #16]
 8003c14:	2300      	movs	r3, #0
 8003c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c1a:	e7aa      	b.n	8003b72 <_printf_i+0x14e>
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	4649      	mov	r1, r9
 8003c20:	4640      	mov	r0, r8
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	47d0      	blx	sl
 8003c26:	3001      	adds	r0, #1
 8003c28:	d0ad      	beq.n	8003b86 <_printf_i+0x162>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	079b      	lsls	r3, r3, #30
 8003c2e:	d413      	bmi.n	8003c58 <_printf_i+0x234>
 8003c30:	68e0      	ldr	r0, [r4, #12]
 8003c32:	9b03      	ldr	r3, [sp, #12]
 8003c34:	4298      	cmp	r0, r3
 8003c36:	bfb8      	it	lt
 8003c38:	4618      	movlt	r0, r3
 8003c3a:	e7a6      	b.n	8003b8a <_printf_i+0x166>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4632      	mov	r2, r6
 8003c40:	4649      	mov	r1, r9
 8003c42:	4640      	mov	r0, r8
 8003c44:	47d0      	blx	sl
 8003c46:	3001      	adds	r0, #1
 8003c48:	d09d      	beq.n	8003b86 <_printf_i+0x162>
 8003c4a:	3501      	adds	r5, #1
 8003c4c:	68e3      	ldr	r3, [r4, #12]
 8003c4e:	9903      	ldr	r1, [sp, #12]
 8003c50:	1a5b      	subs	r3, r3, r1
 8003c52:	42ab      	cmp	r3, r5
 8003c54:	dcf2      	bgt.n	8003c3c <_printf_i+0x218>
 8003c56:	e7eb      	b.n	8003c30 <_printf_i+0x20c>
 8003c58:	2500      	movs	r5, #0
 8003c5a:	f104 0619 	add.w	r6, r4, #25
 8003c5e:	e7f5      	b.n	8003c4c <_printf_i+0x228>
 8003c60:	08004ba7 	.word	0x08004ba7
 8003c64:	08004bb8 	.word	0x08004bb8

08003c68 <memmove>:
 8003c68:	4288      	cmp	r0, r1
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	eb01 0402 	add.w	r4, r1, r2
 8003c70:	d902      	bls.n	8003c78 <memmove+0x10>
 8003c72:	4284      	cmp	r4, r0
 8003c74:	4623      	mov	r3, r4
 8003c76:	d807      	bhi.n	8003c88 <memmove+0x20>
 8003c78:	1e43      	subs	r3, r0, #1
 8003c7a:	42a1      	cmp	r1, r4
 8003c7c:	d008      	beq.n	8003c90 <memmove+0x28>
 8003c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c86:	e7f8      	b.n	8003c7a <memmove+0x12>
 8003c88:	4601      	mov	r1, r0
 8003c8a:	4402      	add	r2, r0
 8003c8c:	428a      	cmp	r2, r1
 8003c8e:	d100      	bne.n	8003c92 <memmove+0x2a>
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c9a:	e7f7      	b.n	8003c8c <memmove+0x24>

08003c9c <memchr>:
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	b510      	push	{r4, lr}
 8003ca0:	b2c9      	uxtb	r1, r1
 8003ca2:	4402      	add	r2, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	d101      	bne.n	8003cae <memchr+0x12>
 8003caa:	2000      	movs	r0, #0
 8003cac:	e003      	b.n	8003cb6 <memchr+0x1a>
 8003cae:	7804      	ldrb	r4, [r0, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	428c      	cmp	r4, r1
 8003cb4:	d1f6      	bne.n	8003ca4 <memchr+0x8>
 8003cb6:	bd10      	pop	{r4, pc}

08003cb8 <memcpy>:
 8003cb8:	440a      	add	r2, r1
 8003cba:	4291      	cmp	r1, r2
 8003cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cc0:	d100      	bne.n	8003cc4 <memcpy+0xc>
 8003cc2:	4770      	bx	lr
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cd0:	d1f9      	bne.n	8003cc6 <memcpy+0xe>
 8003cd2:	bd10      	pop	{r4, pc}

08003cd4 <_realloc_r>:
 8003cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd8:	4680      	mov	r8, r0
 8003cda:	4614      	mov	r4, r2
 8003cdc:	460e      	mov	r6, r1
 8003cde:	b921      	cbnz	r1, 8003cea <_realloc_r+0x16>
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce6:	f7ff bb9b 	b.w	8003420 <_malloc_r>
 8003cea:	b92a      	cbnz	r2, 8003cf8 <_realloc_r+0x24>
 8003cec:	f7ff fc88 	bl	8003600 <_free_r>
 8003cf0:	4625      	mov	r5, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf8:	f000 f81b 	bl	8003d32 <_malloc_usable_size_r>
 8003cfc:	4284      	cmp	r4, r0
 8003cfe:	4607      	mov	r7, r0
 8003d00:	d802      	bhi.n	8003d08 <_realloc_r+0x34>
 8003d02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d06:	d812      	bhi.n	8003d2e <_realloc_r+0x5a>
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f7ff fb88 	bl	8003420 <_malloc_r>
 8003d10:	4605      	mov	r5, r0
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d0ed      	beq.n	8003cf2 <_realloc_r+0x1e>
 8003d16:	42bc      	cmp	r4, r7
 8003d18:	4622      	mov	r2, r4
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	bf28      	it	cs
 8003d1e:	463a      	movcs	r2, r7
 8003d20:	f7ff ffca 	bl	8003cb8 <memcpy>
 8003d24:	4631      	mov	r1, r6
 8003d26:	4640      	mov	r0, r8
 8003d28:	f7ff fc6a 	bl	8003600 <_free_r>
 8003d2c:	e7e1      	b.n	8003cf2 <_realloc_r+0x1e>
 8003d2e:	4635      	mov	r5, r6
 8003d30:	e7df      	b.n	8003cf2 <_realloc_r+0x1e>

08003d32 <_malloc_usable_size_r>:
 8003d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d36:	1f18      	subs	r0, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bfbc      	itt	lt
 8003d3c:	580b      	ldrlt	r3, [r1, r0]
 8003d3e:	18c0      	addlt	r0, r0, r3
 8003d40:	4770      	bx	lr
	...

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
